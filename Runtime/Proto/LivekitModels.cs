// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: livekit_models.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LiveKit.Proto {

  /// <summary>Holder for reflection information generated from livekit_models.proto</summary>
  public static partial class LivekitModelsReflection {

    #region Descriptor
    /// <summary>File descriptor for livekit_models.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LivekitModelsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRsaXZla2l0X21vZGVscy5wcm90bxIHbGl2ZWtpdBofZ29vZ2xlL3Byb3Rv",
            "YnVmL3RpbWVzdGFtcC5wcm90byK0AgoEUm9vbRILCgNzaWQYASABKAkSDAoE",
            "bmFtZRgCIAEoCRIVCg1lbXB0eV90aW1lb3V0GAMgASgNEhgKEG1heF9wYXJ0",
            "aWNpcGFudHMYBCABKA0SFQoNY3JlYXRpb25fdGltZRgFIAEoAxIVCg10dXJu",
            "X3Bhc3N3b3JkGAYgASgJEiYKDmVuYWJsZWRfY29kZWNzGAcgAygLMg4ubGl2",
            "ZWtpdC5Db2RlYxIQCghtZXRhZGF0YRgIIAEoCRIYChBudW1fcGFydGljaXBh",
            "bnRzGAkgASgNEhYKDm51bV9wdWJsaXNoZXJzGAsgASgNEhgKEGFjdGl2ZV9y",
            "ZWNvcmRpbmcYCiABKAgSLAoNcGxheW91dF9kZWxheRgMIAEoCzIVLmxpdmVr",
            "aXQuUGxheW91dERlbGF5IigKBUNvZGVjEgwKBG1pbWUYASABKAkSEQoJZm10",
            "cF9saW5lGAIgASgJIiwKDFBsYXlvdXREZWxheRIPCgdlbmFibGVkGAEgASgI",
            "EgsKA21pbhgCIAEoDSLPAQoVUGFydGljaXBhbnRQZXJtaXNzaW9uEhUKDWNh",
            "bl9zdWJzY3JpYmUYASABKAgSEwoLY2FuX3B1Ymxpc2gYAiABKAgSGAoQY2Fu",
            "X3B1Ymxpc2hfZGF0YRgDIAEoCBIxChNjYW5fcHVibGlzaF9zb3VyY2VzGAkg",
            "AygOMhQubGl2ZWtpdC5UcmFja1NvdXJjZRIOCgZoaWRkZW4YByABKAgSEAoI",
            "cmVjb3JkZXIYCCABKAgSGwoTY2FuX3VwZGF0ZV9tZXRhZGF0YRgKIAEoCCLh",
            "AgoPUGFydGljaXBhbnRJbmZvEgsKA3NpZBgBIAEoCRIQCghpZGVudGl0eRgC",
            "IAEoCRItCgVzdGF0ZRgDIAEoDjIeLmxpdmVraXQuUGFydGljaXBhbnRJbmZv",
            "LlN0YXRlEiIKBnRyYWNrcxgEIAMoCzISLmxpdmVraXQuVHJhY2tJbmZvEhAK",
            "CG1ldGFkYXRhGAUgASgJEhEKCWpvaW5lZF9hdBgGIAEoAxIMCgRuYW1lGAkg",
            "ASgJEg8KB3ZlcnNpb24YCiABKA0SMgoKcGVybWlzc2lvbhgLIAEoCzIeLmxp",
            "dmVraXQuUGFydGljaXBhbnRQZXJtaXNzaW9uEg4KBnJlZ2lvbhgMIAEoCRIU",
            "Cgxpc19wdWJsaXNoZXIYDSABKAgiPgoFU3RhdGUSCwoHSk9JTklORxAAEgoK",
            "BkpPSU5FRBABEgoKBkFDVElWRRACEhAKDERJU0NPTk5FQ1RFRBADIjMKCkVu",
            "Y3J5cHRpb24iJQoEVHlwZRIICgROT05FEAASBwoDR0NNEAESCgoGQ1VTVE9N",
            "EAIiZgoSU2ltdWxjYXN0Q29kZWNJbmZvEhEKCW1pbWVfdHlwZRgBIAEoCRIL",
            "CgNtaWQYAiABKAkSCwoDY2lkGAMgASgJEiMKBmxheWVycxgEIAMoCzITLmxp",
            "dmVraXQuVmlkZW9MYXllciKZAwoJVHJhY2tJbmZvEgsKA3NpZBgBIAEoCRIg",
            "CgR0eXBlGAIgASgOMhIubGl2ZWtpdC5UcmFja1R5cGUSDAoEbmFtZRgDIAEo",
            "CRINCgVtdXRlZBgEIAEoCBINCgV3aWR0aBgFIAEoDRIOCgZoZWlnaHQYBiAB",
            "KA0SEQoJc2ltdWxjYXN0GAcgASgIEhMKC2Rpc2FibGVfZHR4GAggASgIEiQK",
            "BnNvdXJjZRgJIAEoDjIULmxpdmVraXQuVHJhY2tTb3VyY2USIwoGbGF5ZXJz",
            "GAogAygLMhMubGl2ZWtpdC5WaWRlb0xheWVyEhEKCW1pbWVfdHlwZRgLIAEo",
            "CRILCgNtaWQYDCABKAkSKwoGY29kZWNzGA0gAygLMhsubGl2ZWtpdC5TaW11",
            "bGNhc3RDb2RlY0luZm8SDgoGc3RlcmVvGA4gASgIEhMKC2Rpc2FibGVfcmVk",
            "GA8gASgIEiwKCmVuY3J5cHRpb24YECABKA4yGC5saXZla2l0LkVuY3J5cHRp",
            "b24uVHlwZRIOCgZzdHJlYW0YESABKAkicgoKVmlkZW9MYXllchImCgdxdWFs",
            "aXR5GAEgASgOMhUubGl2ZWtpdC5WaWRlb1F1YWxpdHkSDQoFd2lkdGgYAiAB",
            "KA0SDgoGaGVpZ2h0GAMgASgNEg8KB2JpdHJhdGUYBCABKA0SDAoEc3NyYxgF",
            "IAEoDSK0AQoKRGF0YVBhY2tldBImCgRraW5kGAEgASgOMhgubGl2ZWtpdC5E",
            "YXRhUGFja2V0LktpbmQSIwoEdXNlchgCIAEoCzITLmxpdmVraXQuVXNlclBh",
            "Y2tldEgAEi8KB3NwZWFrZXIYAyABKAsyHC5saXZla2l0LkFjdGl2ZVNwZWFr",
            "ZXJVcGRhdGVIACIfCgRLaW5kEgwKCFJFTElBQkxFEAASCQoFTE9TU1kQAUIH",
            "CgV2YWx1ZSI9ChNBY3RpdmVTcGVha2VyVXBkYXRlEiYKCHNwZWFrZXJzGAEg",
            "AygLMhQubGl2ZWtpdC5TcGVha2VySW5mbyI5CgtTcGVha2VySW5mbxILCgNz",
            "aWQYASABKAkSDQoFbGV2ZWwYAiABKAISDgoGYWN0aXZlGAMgASgIIqwBCgpV",
            "c2VyUGFja2V0EhcKD3BhcnRpY2lwYW50X3NpZBgBIAEoCRIcChRwYXJ0aWNp",
            "cGFudF9pZGVudGl0eRgFIAEoCRIPCgdwYXlsb2FkGAIgASgMEhgKEGRlc3Rp",
            "bmF0aW9uX3NpZHMYAyADKAkSHgoWZGVzdGluYXRpb25faWRlbnRpdGllcxgG",
            "IAMoCRISCgV0b3BpYxgEIAEoCUgAiAEBQggKBl90b3BpYyJAChFQYXJ0aWNp",
            "cGFudFRyYWNrcxIXCg9wYXJ0aWNpcGFudF9zaWQYASABKAkSEgoKdHJhY2tf",
            "c2lkcxgCIAMoCSK2AQoKU2VydmVySW5mbxIsCgdlZGl0aW9uGAEgASgOMhsu",
            "bGl2ZWtpdC5TZXJ2ZXJJbmZvLkVkaXRpb24SDwoHdmVyc2lvbhgCIAEoCRIQ",
            "Cghwcm90b2NvbBgDIAEoBRIOCgZyZWdpb24YBCABKAkSDwoHbm9kZV9pZBgF",
            "IAEoCRISCgpkZWJ1Z19pbmZvGAYgASgJIiIKB0VkaXRpb24SDAoIU3RhbmRh",
            "cmQQABIJCgVDbG91ZBABIt0CCgpDbGllbnRJbmZvEiQKA3NkaxgBIAEoDjIX",
            "LmxpdmVraXQuQ2xpZW50SW5mby5TREsSDwoHdmVyc2lvbhgCIAEoCRIQCghw",
            "cm90b2NvbBgDIAEoBRIKCgJvcxgEIAEoCRISCgpvc192ZXJzaW9uGAUgASgJ",
            "EhQKDGRldmljZV9tb2RlbBgGIAEoCRIPCgdicm93c2VyGAcgASgJEhcKD2Jy",
            "b3dzZXJfdmVyc2lvbhgIIAEoCRIPCgdhZGRyZXNzGAkgASgJEg8KB25ldHdv",
            "cmsYCiABKAkigwEKA1NESxILCgdVTktOT1dOEAASBgoCSlMQARIJCgVTV0lG",
            "VBACEgsKB0FORFJPSUQQAxILCgdGTFVUVEVSEAQSBgoCR08QBRIJCgVVTklU",
            "WRAGEhAKDFJFQUNUX05BVElWRRAHEggKBFJVU1QQCBIKCgZQWVRIT04QCRIH",
            "CgNDUFAQCiKMAgoTQ2xpZW50Q29uZmlndXJhdGlvbhIqCgV2aWRlbxgBIAEo",
            "CzIbLmxpdmVraXQuVmlkZW9Db25maWd1cmF0aW9uEisKBnNjcmVlbhgCIAEo",
            "CzIbLmxpdmVraXQuVmlkZW9Db25maWd1cmF0aW9uEjcKEXJlc3VtZV9jb25u",
            "ZWN0aW9uGAMgASgOMhwubGl2ZWtpdC5DbGllbnRDb25maWdTZXR0aW5nEjAK",
            "D2Rpc2FibGVkX2NvZGVjcxgEIAEoCzIXLmxpdmVraXQuRGlzYWJsZWRDb2Rl",
            "Y3MSMQoLZm9yY2VfcmVsYXkYBSABKA4yHC5saXZla2l0LkNsaWVudENvbmZp",
            "Z1NldHRpbmciTAoSVmlkZW9Db25maWd1cmF0aW9uEjYKEGhhcmR3YXJlX2Vu",
            "Y29kZXIYASABKA4yHC5saXZla2l0LkNsaWVudENvbmZpZ1NldHRpbmciUQoO",
            "RGlzYWJsZWRDb2RlY3MSHgoGY29kZWNzGAEgAygLMg4ubGl2ZWtpdC5Db2Rl",
            "YxIfCgdwdWJsaXNoGAIgAygLMg4ubGl2ZWtpdC5Db2RlYyKAAgoIUlRQRHJp",
            "ZnQSLgoKc3RhcnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASLAoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEhAKCGR1cmF0aW9uGAMgASgBEhcKD3N0YXJ0X3RpbWVzdGFtcBgE",
            "IAEoBBIVCg1lbmRfdGltZXN0YW1wGAUgASgEEhcKD3J0cF9jbG9ja190aWNr",
            "cxgGIAEoBBIVCg1kcmlmdF9zYW1wbGVzGAcgASgDEhAKCGRyaWZ0X21zGAgg",
            "ASgBEhIKCmNsb2NrX3JhdGUYCSABKAEi7wkKCFJUUFN0YXRzEi4KCnN0YXJ0",
            "X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVu",
            "ZF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIQCghk",
            "dXJhdGlvbhgDIAEoARIPCgdwYWNrZXRzGAQgASgNEhMKC3BhY2tldF9yYXRl",
            "GAUgASgBEg0KBWJ5dGVzGAYgASgEEhQKDGhlYWRlcl9ieXRlcxgnIAEoBBIP",
            "CgdiaXRyYXRlGAcgASgBEhQKDHBhY2tldHNfbG9zdBgIIAEoDRIYChBwYWNr",
            "ZXRfbG9zc19yYXRlGAkgASgBEh4KFnBhY2tldF9sb3NzX3BlcmNlbnRhZ2UY",
            "CiABKAISGQoRcGFja2V0c19kdXBsaWNhdGUYCyABKA0SHQoVcGFja2V0X2R1",
            "cGxpY2F0ZV9yYXRlGAwgASgBEhcKD2J5dGVzX2R1cGxpY2F0ZRgNIAEoBBIe",
            "ChZoZWFkZXJfYnl0ZXNfZHVwbGljYXRlGCggASgEEhkKEWJpdHJhdGVfZHVw",
            "bGljYXRlGA4gASgBEhcKD3BhY2tldHNfcGFkZGluZxgPIAEoDRIbChNwYWNr",
            "ZXRfcGFkZGluZ19yYXRlGBAgASgBEhUKDWJ5dGVzX3BhZGRpbmcYESABKAQS",
            "HAoUaGVhZGVyX2J5dGVzX3BhZGRpbmcYKSABKAQSFwoPYml0cmF0ZV9wYWRk",
            "aW5nGBIgASgBEhwKFHBhY2tldHNfb3V0X29mX29yZGVyGBMgASgNEg4KBmZy",
            "YW1lcxgUIAEoDRISCgpmcmFtZV9yYXRlGBUgASgBEhYKDmppdHRlcl9jdXJy",
            "ZW50GBYgASgBEhIKCmppdHRlcl9tYXgYFyABKAESOgoNZ2FwX2hpc3RvZ3Jh",
            "bRgYIAMoCzIjLmxpdmVraXQuUlRQU3RhdHMuR2FwSGlzdG9ncmFtRW50cnkS",
            "DQoFbmFja3MYGSABKA0SEQoJbmFja19hY2tzGCUgASgNEhMKC25hY2tfbWlz",
            "c2VzGBogASgNEhUKDW5hY2tfcmVwZWF0ZWQYJiABKA0SDAoEcGxpcxgbIAEo",
            "DRIsCghsYXN0X3BsaRgcIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASDAoEZmlycxgdIAEoDRIsCghsYXN0X2ZpchgeIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASEwoLcnR0X2N1cnJlbnQYHyABKA0SDwoHcnR0",
            "X21heBggIAEoDRISCgprZXlfZnJhbWVzGCEgASgNEjIKDmxhc3Rfa2V5X2Zy",
            "YW1lGCIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIXCg9sYXll",
            "cl9sb2NrX3BsaXMYIyABKA0SNwoTbGFzdF9sYXllcl9sb2NrX3BsaRgkIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASJwoMcGFja2V0X2RyaWZ0",
            "GCwgASgLMhEubGl2ZWtpdC5SVFBEcmlmdBInCgxyZXBvcnRfZHJpZnQYLSAB",
            "KAsyES5saXZla2l0LlJUUERyaWZ0GjMKEUdhcEhpc3RvZ3JhbUVudHJ5EgsK",
            "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoDToCOAEiMQoMVGltZWRWZXJzaW9u",
            "EhIKCnVuaXhfbWljcm8YASABKAMSDQoFdGlja3MYAiABKAUqLwoKQXVkaW9D",
            "b2RlYxIOCgpERUZBVUxUX0FDEAASCAoET1BVUxABEgcKA0FBQxACKlYKClZp",
            "ZGVvQ29kZWMSDgoKREVGQVVMVF9WQxAAEhEKDUgyNjRfQkFTRUxJTkUQARIN",
            "CglIMjY0X01BSU4QAhINCglIMjY0X0hJR0gQAxIHCgNWUDgQBCorCglUcmFj",
            "a1R5cGUSCQoFQVVESU8QABIJCgVWSURFTxABEggKBERBVEEQAipgCgtUcmFj",
            "a1NvdXJjZRILCgdVTktOT1dOEAASCgoGQ0FNRVJBEAESDgoKTUlDUk9QSE9O",
            "RRACEhAKDFNDUkVFTl9TSEFSRRADEhYKElNDUkVFTl9TSEFSRV9BVURJTxAE",
            "KjYKDFZpZGVvUXVhbGl0eRIHCgNMT1cQABIKCgZNRURJVU0QARIICgRISUdI",
            "EAISBwoDT0ZGEAMqNgoRQ29ubmVjdGlvblF1YWxpdHkSCAoEUE9PUhAAEggK",
            "BEdPT0QQARINCglFWENFTExFTlQQAio7ChNDbGllbnRDb25maWdTZXR0aW5n",
            "EgkKBVVOU0VUEAASDAoIRElTQUJMRUQQARILCgdFTkFCTEVEEAIqugEKEERp",
            "c2Nvbm5lY3RSZWFzb24SEgoOVU5LTk9XTl9SRUFTT04QABIUChBDTElFTlRf",
            "SU5JVElBVEVEEAESFgoSRFVQTElDQVRFX0lERU5USVRZEAISEwoPU0VSVkVS",
            "X1NIVVRET1dOEAMSFwoTUEFSVElDSVBBTlRfUkVNT1ZFRBAEEhAKDFJPT01f",
            "REVMRVRFRBAFEhIKDlNUQVRFX01JU01BVENIEAYSEAoMSk9JTl9GQUlMVVJF",
            "EAcqiQEKD1JlY29ubmVjdFJlYXNvbhIOCgpSUl9VTktOT1dOEAASGgoWUlJf",
            "U0lHTkFMX0RJU0NPTk5FQ1RFRBABEhcKE1JSX1BVQkxJU0hFUl9GQUlMRUQQ",
            "AhIYChRSUl9TVUJTQ1JJQkVSX0ZBSUxFRBADEhcKE1JSX1NXSVRDSF9DQU5E",
            "SURBVEUQBCpUChFTdWJzY3JpcHRpb25FcnJvchIOCgpTRV9VTktOT1dOEAAS",
            "GAoUU0VfQ09ERUNfVU5TVVBQT1JURUQQARIVChFTRV9UUkFDS19OT1RGT1VO",
            "RBACQkZaI2dpdGh1Yi5jb20vbGl2ZWtpdC9wcm90b2NvbC9saXZla2l0qgIN",
            "TGl2ZUtpdC5Qcm90b+oCDkxpdmVLaXQ6OlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LiveKit.Proto.AudioCodec), typeof(global::LiveKit.Proto.VideoCodec), typeof(global::LiveKit.Proto.TrackType), typeof(global::LiveKit.Proto.TrackSource), typeof(global::LiveKit.Proto.VideoQuality), typeof(global::LiveKit.Proto.ConnectionQuality), typeof(global::LiveKit.Proto.ClientConfigSetting), typeof(global::LiveKit.Proto.DisconnectReason), typeof(global::LiveKit.Proto.ReconnectReason), typeof(global::LiveKit.Proto.SubscriptionError), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.Room), global::LiveKit.Proto.Room.Parser, new[]{ "Sid", "Name", "EmptyTimeout", "MaxParticipants", "CreationTime", "TurnPassword", "EnabledCodecs", "Metadata", "NumParticipants", "NumPublishers", "ActiveRecording", "PlayoutDelay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.Codec), global::LiveKit.Proto.Codec.Parser, new[]{ "Mime", "FmtpLine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.PlayoutDelay), global::LiveKit.Proto.PlayoutDelay.Parser, new[]{ "Enabled", "Min" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ParticipantPermission), global::LiveKit.Proto.ParticipantPermission.Parser, new[]{ "CanSubscribe", "CanPublish", "CanPublishData", "CanPublishSources", "Hidden", "Recorder", "CanUpdateMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ParticipantInfo), global::LiveKit.Proto.ParticipantInfo.Parser, new[]{ "Sid", "Identity", "State", "Tracks", "Metadata", "JoinedAt", "Name", "Version", "Permission", "Region", "IsPublisher" }, null, new[]{ typeof(global::LiveKit.Proto.ParticipantInfo.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.Encryption), global::LiveKit.Proto.Encryption.Parser, null, null, new[]{ typeof(global::LiveKit.Proto.Encryption.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.SimulcastCodecInfo), global::LiveKit.Proto.SimulcastCodecInfo.Parser, new[]{ "MimeType", "Mid", "Cid", "Layers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.TrackInfo), global::LiveKit.Proto.TrackInfo.Parser, new[]{ "Sid", "Type", "Name", "Muted", "Width", "Height", "Simulcast", "DisableDtx", "Source", "Layers", "MimeType", "Mid", "Codecs", "Stereo", "DisableRed", "Encryption", "Stream" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.VideoLayer), global::LiveKit.Proto.VideoLayer.Parser, new[]{ "Quality", "Width", "Height", "Bitrate", "Ssrc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.DataPacket), global::LiveKit.Proto.DataPacket.Parser, new[]{ "Kind", "User", "Speaker" }, new[]{ "Value" }, new[]{ typeof(global::LiveKit.Proto.DataPacket.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ActiveSpeakerUpdate), global::LiveKit.Proto.ActiveSpeakerUpdate.Parser, new[]{ "Speakers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.SpeakerInfo), global::LiveKit.Proto.SpeakerInfo.Parser, new[]{ "Sid", "Level", "Active" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.UserPacket), global::LiveKit.Proto.UserPacket.Parser, new[]{ "ParticipantSid", "ParticipantIdentity", "Payload", "DestinationSids", "DestinationIdentities", "Topic" }, new[]{ "Topic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ParticipantTracks), global::LiveKit.Proto.ParticipantTracks.Parser, new[]{ "ParticipantSid", "TrackSids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ServerInfo), global::LiveKit.Proto.ServerInfo.Parser, new[]{ "Edition", "Version", "Protocol", "Region", "NodeId", "DebugInfo" }, null, new[]{ typeof(global::LiveKit.Proto.ServerInfo.Types.Edition) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ClientInfo), global::LiveKit.Proto.ClientInfo.Parser, new[]{ "Sdk", "Version", "Protocol", "Os", "OsVersion", "DeviceModel", "Browser", "BrowserVersion", "Address", "Network" }, null, new[]{ typeof(global::LiveKit.Proto.ClientInfo.Types.SDK) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.ClientConfiguration), global::LiveKit.Proto.ClientConfiguration.Parser, new[]{ "Video", "Screen", "ResumeConnection", "DisabledCodecs", "ForceRelay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.VideoConfiguration), global::LiveKit.Proto.VideoConfiguration.Parser, new[]{ "HardwareEncoder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.DisabledCodecs), global::LiveKit.Proto.DisabledCodecs.Parser, new[]{ "Codecs", "Publish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.RTPDrift), global::LiveKit.Proto.RTPDrift.Parser, new[]{ "StartTime", "EndTime", "Duration", "StartTimestamp", "EndTimestamp", "RtpClockTicks", "DriftSamples", "DriftMs", "ClockRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.RTPStats), global::LiveKit.Proto.RTPStats.Parser, new[]{ "StartTime", "EndTime", "Duration", "Packets", "PacketRate", "Bytes", "HeaderBytes", "Bitrate", "PacketsLost", "PacketLossRate", "PacketLossPercentage", "PacketsDuplicate", "PacketDuplicateRate", "BytesDuplicate", "HeaderBytesDuplicate", "BitrateDuplicate", "PacketsPadding", "PacketPaddingRate", "BytesPadding", "HeaderBytesPadding", "BitratePadding", "PacketsOutOfOrder", "Frames", "FrameRate", "JitterCurrent", "JitterMax", "GapHistogram", "Nacks", "NackAcks", "NackMisses", "NackRepeated", "Plis", "LastPli", "Firs", "LastFir", "RttCurrent", "RttMax", "KeyFrames", "LastKeyFrame", "LayerLockPlis", "LastLayerLockPli", "PacketDrift", "ReportDrift" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveKit.Proto.TimedVersion), global::LiveKit.Proto.TimedVersion.Parser, new[]{ "UnixMicro", "Ticks" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AudioCodec {
    [pbr::OriginalName("DEFAULT_AC")] DefaultAc = 0,
    [pbr::OriginalName("OPUS")] Opus = 1,
    [pbr::OriginalName("AAC")] Aac = 2,
  }

  public enum VideoCodec {
    [pbr::OriginalName("DEFAULT_VC")] DefaultVc = 0,
    [pbr::OriginalName("H264_BASELINE")] H264Baseline = 1,
    [pbr::OriginalName("H264_MAIN")] H264Main = 2,
    [pbr::OriginalName("H264_HIGH")] H264High = 3,
    [pbr::OriginalName("VP8")] Vp8 = 4,
  }

  public enum TrackType {
    [pbr::OriginalName("AUDIO")] Audio = 0,
    [pbr::OriginalName("VIDEO")] Video = 1,
    [pbr::OriginalName("DATA")] Data = 2,
  }

  public enum TrackSource {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("CAMERA")] Camera = 1,
    [pbr::OriginalName("MICROPHONE")] Microphone = 2,
    [pbr::OriginalName("SCREEN_SHARE")] ScreenShare = 3,
    [pbr::OriginalName("SCREEN_SHARE_AUDIO")] ScreenShareAudio = 4,
  }

  public enum VideoQuality {
    [pbr::OriginalName("LOW")] Low = 0,
    [pbr::OriginalName("MEDIUM")] Medium = 1,
    [pbr::OriginalName("HIGH")] High = 2,
    [pbr::OriginalName("OFF")] Off = 3,
  }

  public enum ConnectionQuality {
    [pbr::OriginalName("POOR")] Poor = 0,
    [pbr::OriginalName("GOOD")] Good = 1,
    [pbr::OriginalName("EXCELLENT")] Excellent = 2,
  }

  public enum ClientConfigSetting {
    [pbr::OriginalName("UNSET")] Unset = 0,
    [pbr::OriginalName("DISABLED")] Disabled = 1,
    [pbr::OriginalName("ENABLED")] Enabled = 2,
  }

  public enum DisconnectReason {
    [pbr::OriginalName("UNKNOWN_REASON")] UnknownReason = 0,
    [pbr::OriginalName("CLIENT_INITIATED")] ClientInitiated = 1,
    [pbr::OriginalName("DUPLICATE_IDENTITY")] DuplicateIdentity = 2,
    [pbr::OriginalName("SERVER_SHUTDOWN")] ServerShutdown = 3,
    [pbr::OriginalName("PARTICIPANT_REMOVED")] ParticipantRemoved = 4,
    [pbr::OriginalName("ROOM_DELETED")] RoomDeleted = 5,
    [pbr::OriginalName("STATE_MISMATCH")] StateMismatch = 6,
    [pbr::OriginalName("JOIN_FAILURE")] JoinFailure = 7,
  }

  public enum ReconnectReason {
    [pbr::OriginalName("RR_UNKNOWN")] RrUnknown = 0,
    [pbr::OriginalName("RR_SIGNAL_DISCONNECTED")] RrSignalDisconnected = 1,
    [pbr::OriginalName("RR_PUBLISHER_FAILED")] RrPublisherFailed = 2,
    [pbr::OriginalName("RR_SUBSCRIBER_FAILED")] RrSubscriberFailed = 3,
    [pbr::OriginalName("RR_SWITCH_CANDIDATE")] RrSwitchCandidate = 4,
  }

  public enum SubscriptionError {
    [pbr::OriginalName("SE_UNKNOWN")] SeUnknown = 0,
    [pbr::OriginalName("SE_CODEC_UNSUPPORTED")] SeCodecUnsupported = 1,
    [pbr::OriginalName("SE_TRACK_NOTFOUND")] SeTrackNotfound = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Room : pb::IMessage<Room>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      sid_ = other.sid_;
      name_ = other.name_;
      emptyTimeout_ = other.emptyTimeout_;
      maxParticipants_ = other.maxParticipants_;
      creationTime_ = other.creationTime_;
      turnPassword_ = other.turnPassword_;
      enabledCodecs_ = other.enabledCodecs_.Clone();
      metadata_ = other.metadata_;
      numParticipants_ = other.numParticipants_;
      numPublishers_ = other.numPublishers_;
      activeRecording_ = other.activeRecording_;
      playoutDelay_ = other.playoutDelay_ != null ? other.playoutDelay_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 1;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "empty_timeout" field.</summary>
    public const int EmptyTimeoutFieldNumber = 3;
    private uint emptyTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EmptyTimeout {
      get { return emptyTimeout_; }
      set {
        emptyTimeout_ = value;
      }
    }

    /// <summary>Field number for the "max_participants" field.</summary>
    public const int MaxParticipantsFieldNumber = 4;
    private uint maxParticipants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxParticipants {
      get { return maxParticipants_; }
      set {
        maxParticipants_ = value;
      }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 5;
    private long creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTime {
      get { return creationTime_; }
      set {
        creationTime_ = value;
      }
    }

    /// <summary>Field number for the "turn_password" field.</summary>
    public const int TurnPasswordFieldNumber = 6;
    private string turnPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TurnPassword {
      get { return turnPassword_; }
      set {
        turnPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enabled_codecs" field.</summary>
    public const int EnabledCodecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.Codec> _repeated_enabledCodecs_codec
        = pb::FieldCodec.ForMessage(58, global::LiveKit.Proto.Codec.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.Codec> enabledCodecs_ = new pbc::RepeatedField<global::LiveKit.Proto.Codec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.Codec> EnabledCodecs {
      get { return enabledCodecs_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private string metadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_participants" field.</summary>
    public const int NumParticipantsFieldNumber = 9;
    private uint numParticipants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumParticipants {
      get { return numParticipants_; }
      set {
        numParticipants_ = value;
      }
    }

    /// <summary>Field number for the "num_publishers" field.</summary>
    public const int NumPublishersFieldNumber = 11;
    private uint numPublishers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPublishers {
      get { return numPublishers_; }
      set {
        numPublishers_ = value;
      }
    }

    /// <summary>Field number for the "active_recording" field.</summary>
    public const int ActiveRecordingFieldNumber = 10;
    private bool activeRecording_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ActiveRecording {
      get { return activeRecording_; }
      set {
        activeRecording_ = value;
      }
    }

    /// <summary>Field number for the "playout_delay" field.</summary>
    public const int PlayoutDelayFieldNumber = 12;
    private global::LiveKit.Proto.PlayoutDelay playoutDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.PlayoutDelay PlayoutDelay {
      get { return playoutDelay_; }
      set {
        playoutDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sid != other.Sid) return false;
      if (Name != other.Name) return false;
      if (EmptyTimeout != other.EmptyTimeout) return false;
      if (MaxParticipants != other.MaxParticipants) return false;
      if (CreationTime != other.CreationTime) return false;
      if (TurnPassword != other.TurnPassword) return false;
      if(!enabledCodecs_.Equals(other.enabledCodecs_)) return false;
      if (Metadata != other.Metadata) return false;
      if (NumParticipants != other.NumParticipants) return false;
      if (NumPublishers != other.NumPublishers) return false;
      if (ActiveRecording != other.ActiveRecording) return false;
      if (!object.Equals(PlayoutDelay, other.PlayoutDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EmptyTimeout != 0) hash ^= EmptyTimeout.GetHashCode();
      if (MaxParticipants != 0) hash ^= MaxParticipants.GetHashCode();
      if (CreationTime != 0L) hash ^= CreationTime.GetHashCode();
      if (TurnPassword.Length != 0) hash ^= TurnPassword.GetHashCode();
      hash ^= enabledCodecs_.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (NumParticipants != 0) hash ^= NumParticipants.GetHashCode();
      if (NumPublishers != 0) hash ^= NumPublishers.GetHashCode();
      if (ActiveRecording != false) hash ^= ActiveRecording.GetHashCode();
      if (playoutDelay_ != null) hash ^= PlayoutDelay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (EmptyTimeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EmptyTimeout);
      }
      if (MaxParticipants != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxParticipants);
      }
      if (CreationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreationTime);
      }
      if (TurnPassword.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TurnPassword);
      }
      enabledCodecs_.WriteTo(output, _repeated_enabledCodecs_codec);
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Metadata);
      }
      if (NumParticipants != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumParticipants);
      }
      if (ActiveRecording != false) {
        output.WriteRawTag(80);
        output.WriteBool(ActiveRecording);
      }
      if (NumPublishers != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NumPublishers);
      }
      if (playoutDelay_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlayoutDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (EmptyTimeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EmptyTimeout);
      }
      if (MaxParticipants != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxParticipants);
      }
      if (CreationTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreationTime);
      }
      if (TurnPassword.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TurnPassword);
      }
      enabledCodecs_.WriteTo(ref output, _repeated_enabledCodecs_codec);
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Metadata);
      }
      if (NumParticipants != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumParticipants);
      }
      if (ActiveRecording != false) {
        output.WriteRawTag(80);
        output.WriteBool(ActiveRecording);
      }
      if (NumPublishers != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NumPublishers);
      }
      if (playoutDelay_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlayoutDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EmptyTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EmptyTimeout);
      }
      if (MaxParticipants != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxParticipants);
      }
      if (CreationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTime);
      }
      if (TurnPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TurnPassword);
      }
      size += enabledCodecs_.CalculateSize(_repeated_enabledCodecs_codec);
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (NumParticipants != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumParticipants);
      }
      if (NumPublishers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPublishers);
      }
      if (ActiveRecording != false) {
        size += 1 + 1;
      }
      if (playoutDelay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayoutDelay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EmptyTimeout != 0) {
        EmptyTimeout = other.EmptyTimeout;
      }
      if (other.MaxParticipants != 0) {
        MaxParticipants = other.MaxParticipants;
      }
      if (other.CreationTime != 0L) {
        CreationTime = other.CreationTime;
      }
      if (other.TurnPassword.Length != 0) {
        TurnPassword = other.TurnPassword;
      }
      enabledCodecs_.Add(other.enabledCodecs_);
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.NumParticipants != 0) {
        NumParticipants = other.NumParticipants;
      }
      if (other.NumPublishers != 0) {
        NumPublishers = other.NumPublishers;
      }
      if (other.ActiveRecording != false) {
        ActiveRecording = other.ActiveRecording;
      }
      if (other.playoutDelay_ != null) {
        if (playoutDelay_ == null) {
          PlayoutDelay = new global::LiveKit.Proto.PlayoutDelay();
        }
        PlayoutDelay.MergeFrom(other.PlayoutDelay);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            EmptyTimeout = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxParticipants = input.ReadUInt32();
            break;
          }
          case 40: {
            CreationTime = input.ReadInt64();
            break;
          }
          case 50: {
            TurnPassword = input.ReadString();
            break;
          }
          case 58: {
            enabledCodecs_.AddEntriesFrom(input, _repeated_enabledCodecs_codec);
            break;
          }
          case 66: {
            Metadata = input.ReadString();
            break;
          }
          case 72: {
            NumParticipants = input.ReadUInt32();
            break;
          }
          case 80: {
            ActiveRecording = input.ReadBool();
            break;
          }
          case 88: {
            NumPublishers = input.ReadUInt32();
            break;
          }
          case 98: {
            if (playoutDelay_ == null) {
              PlayoutDelay = new global::LiveKit.Proto.PlayoutDelay();
            }
            input.ReadMessage(PlayoutDelay);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            EmptyTimeout = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxParticipants = input.ReadUInt32();
            break;
          }
          case 40: {
            CreationTime = input.ReadInt64();
            break;
          }
          case 50: {
            TurnPassword = input.ReadString();
            break;
          }
          case 58: {
            enabledCodecs_.AddEntriesFrom(ref input, _repeated_enabledCodecs_codec);
            break;
          }
          case 66: {
            Metadata = input.ReadString();
            break;
          }
          case 72: {
            NumParticipants = input.ReadUInt32();
            break;
          }
          case 80: {
            ActiveRecording = input.ReadBool();
            break;
          }
          case 88: {
            NumPublishers = input.ReadUInt32();
            break;
          }
          case 98: {
            if (playoutDelay_ == null) {
              PlayoutDelay = new global::LiveKit.Proto.PlayoutDelay();
            }
            input.ReadMessage(PlayoutDelay);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Codec : pb::IMessage<Codec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Codec> _parser = new pb::MessageParser<Codec>(() => new Codec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Codec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Codec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Codec(Codec other) : this() {
      mime_ = other.mime_;
      fmtpLine_ = other.fmtpLine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Codec Clone() {
      return new Codec(this);
    }

    /// <summary>Field number for the "mime" field.</summary>
    public const int MimeFieldNumber = 1;
    private string mime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mime {
      get { return mime_; }
      set {
        mime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fmtp_line" field.</summary>
    public const int FmtpLineFieldNumber = 2;
    private string fmtpLine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FmtpLine {
      get { return fmtpLine_; }
      set {
        fmtpLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Codec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mime != other.Mime) return false;
      if (FmtpLine != other.FmtpLine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mime.Length != 0) hash ^= Mime.GetHashCode();
      if (FmtpLine.Length != 0) hash ^= FmtpLine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mime);
      }
      if (FmtpLine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FmtpLine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mime);
      }
      if (FmtpLine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FmtpLine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mime);
      }
      if (FmtpLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FmtpLine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Codec other) {
      if (other == null) {
        return;
      }
      if (other.Mime.Length != 0) {
        Mime = other.Mime;
      }
      if (other.FmtpLine.Length != 0) {
        FmtpLine = other.FmtpLine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Mime = input.ReadString();
            break;
          }
          case 18: {
            FmtpLine = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Mime = input.ReadString();
            break;
          }
          case 18: {
            FmtpLine = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayoutDelay : pb::IMessage<PlayoutDelay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayoutDelay> _parser = new pb::MessageParser<PlayoutDelay>(() => new PlayoutDelay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayoutDelay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayoutDelay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayoutDelay(PlayoutDelay other) : this() {
      enabled_ = other.enabled_;
      min_ = other.min_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayoutDelay Clone() {
      return new PlayoutDelay(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 2;
    private uint min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayoutDelay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayoutDelay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (Min != other.Min) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Min != 0) hash ^= Min.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (Min != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Min);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (Min != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Min);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayoutDelay other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 16: {
            Min = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
          case 16: {
            Min = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ParticipantPermission : pb::IMessage<ParticipantPermission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParticipantPermission> _parser = new pb::MessageParser<ParticipantPermission>(() => new ParticipantPermission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticipantPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantPermission(ParticipantPermission other) : this() {
      canSubscribe_ = other.canSubscribe_;
      canPublish_ = other.canPublish_;
      canPublishData_ = other.canPublishData_;
      canPublishSources_ = other.canPublishSources_.Clone();
      hidden_ = other.hidden_;
      recorder_ = other.recorder_;
      canUpdateMetadata_ = other.canUpdateMetadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantPermission Clone() {
      return new ParticipantPermission(this);
    }

    /// <summary>Field number for the "can_subscribe" field.</summary>
    public const int CanSubscribeFieldNumber = 1;
    private bool canSubscribe_;
    /// <summary>
    /// allow participant to subscribe to other tracks in the room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSubscribe {
      get { return canSubscribe_; }
      set {
        canSubscribe_ = value;
      }
    }

    /// <summary>Field number for the "can_publish" field.</summary>
    public const int CanPublishFieldNumber = 2;
    private bool canPublish_;
    /// <summary>
    /// allow participant to publish new tracks to room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPublish {
      get { return canPublish_; }
      set {
        canPublish_ = value;
      }
    }

    /// <summary>Field number for the "can_publish_data" field.</summary>
    public const int CanPublishDataFieldNumber = 3;
    private bool canPublishData_;
    /// <summary>
    /// allow participant to publish data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPublishData {
      get { return canPublishData_; }
      set {
        canPublishData_ = value;
      }
    }

    /// <summary>Field number for the "can_publish_sources" field.</summary>
    public const int CanPublishSourcesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.TrackSource> _repeated_canPublishSources_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::LiveKit.Proto.TrackSource) x);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.TrackSource> canPublishSources_ = new pbc::RepeatedField<global::LiveKit.Proto.TrackSource>();
    /// <summary>
    /// sources that are allowed to be published
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.TrackSource> CanPublishSources {
      get { return canPublishSources_; }
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 7;
    private bool hidden_;
    /// <summary>
    /// indicates that it's hidden to others
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hidden {
      get { return hidden_; }
      set {
        hidden_ = value;
      }
    }

    /// <summary>Field number for the "recorder" field.</summary>
    public const int RecorderFieldNumber = 8;
    private bool recorder_;
    /// <summary>
    /// indicates it's a recorder instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Recorder {
      get { return recorder_; }
      set {
        recorder_ = value;
      }
    }

    /// <summary>Field number for the "can_update_metadata" field.</summary>
    public const int CanUpdateMetadataFieldNumber = 10;
    private bool canUpdateMetadata_;
    /// <summary>
    /// indicates that participant can update own metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanUpdateMetadata {
      get { return canUpdateMetadata_; }
      set {
        canUpdateMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticipantPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticipantPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanSubscribe != other.CanSubscribe) return false;
      if (CanPublish != other.CanPublish) return false;
      if (CanPublishData != other.CanPublishData) return false;
      if(!canPublishSources_.Equals(other.canPublishSources_)) return false;
      if (Hidden != other.Hidden) return false;
      if (Recorder != other.Recorder) return false;
      if (CanUpdateMetadata != other.CanUpdateMetadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanSubscribe != false) hash ^= CanSubscribe.GetHashCode();
      if (CanPublish != false) hash ^= CanPublish.GetHashCode();
      if (CanPublishData != false) hash ^= CanPublishData.GetHashCode();
      hash ^= canPublishSources_.GetHashCode();
      if (Hidden != false) hash ^= Hidden.GetHashCode();
      if (Recorder != false) hash ^= Recorder.GetHashCode();
      if (CanUpdateMetadata != false) hash ^= CanUpdateMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CanSubscribe != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanSubscribe);
      }
      if (CanPublish != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanPublish);
      }
      if (CanPublishData != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPublishData);
      }
      if (Hidden != false) {
        output.WriteRawTag(56);
        output.WriteBool(Hidden);
      }
      if (Recorder != false) {
        output.WriteRawTag(64);
        output.WriteBool(Recorder);
      }
      canPublishSources_.WriteTo(output, _repeated_canPublishSources_codec);
      if (CanUpdateMetadata != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanUpdateMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CanSubscribe != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanSubscribe);
      }
      if (CanPublish != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanPublish);
      }
      if (CanPublishData != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPublishData);
      }
      if (Hidden != false) {
        output.WriteRawTag(56);
        output.WriteBool(Hidden);
      }
      if (Recorder != false) {
        output.WriteRawTag(64);
        output.WriteBool(Recorder);
      }
      canPublishSources_.WriteTo(ref output, _repeated_canPublishSources_codec);
      if (CanUpdateMetadata != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanUpdateMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanSubscribe != false) {
        size += 1 + 1;
      }
      if (CanPublish != false) {
        size += 1 + 1;
      }
      if (CanPublishData != false) {
        size += 1 + 1;
      }
      size += canPublishSources_.CalculateSize(_repeated_canPublishSources_codec);
      if (Hidden != false) {
        size += 1 + 1;
      }
      if (Recorder != false) {
        size += 1 + 1;
      }
      if (CanUpdateMetadata != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticipantPermission other) {
      if (other == null) {
        return;
      }
      if (other.CanSubscribe != false) {
        CanSubscribe = other.CanSubscribe;
      }
      if (other.CanPublish != false) {
        CanPublish = other.CanPublish;
      }
      if (other.CanPublishData != false) {
        CanPublishData = other.CanPublishData;
      }
      canPublishSources_.Add(other.canPublishSources_);
      if (other.Hidden != false) {
        Hidden = other.Hidden;
      }
      if (other.Recorder != false) {
        Recorder = other.Recorder;
      }
      if (other.CanUpdateMetadata != false) {
        CanUpdateMetadata = other.CanUpdateMetadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CanSubscribe = input.ReadBool();
            break;
          }
          case 16: {
            CanPublish = input.ReadBool();
            break;
          }
          case 24: {
            CanPublishData = input.ReadBool();
            break;
          }
          case 56: {
            Hidden = input.ReadBool();
            break;
          }
          case 64: {
            Recorder = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            canPublishSources_.AddEntriesFrom(input, _repeated_canPublishSources_codec);
            break;
          }
          case 80: {
            CanUpdateMetadata = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CanSubscribe = input.ReadBool();
            break;
          }
          case 16: {
            CanPublish = input.ReadBool();
            break;
          }
          case 24: {
            CanPublishData = input.ReadBool();
            break;
          }
          case 56: {
            Hidden = input.ReadBool();
            break;
          }
          case 64: {
            Recorder = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            canPublishSources_.AddEntriesFrom(ref input, _repeated_canPublishSources_codec);
            break;
          }
          case 80: {
            CanUpdateMetadata = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ParticipantInfo : pb::IMessage<ParticipantInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParticipantInfo> _parser = new pb::MessageParser<ParticipantInfo>(() => new ParticipantInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticipantInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantInfo(ParticipantInfo other) : this() {
      sid_ = other.sid_;
      identity_ = other.identity_;
      state_ = other.state_;
      tracks_ = other.tracks_.Clone();
      metadata_ = other.metadata_;
      joinedAt_ = other.joinedAt_;
      name_ = other.name_;
      version_ = other.version_;
      permission_ = other.permission_ != null ? other.permission_.Clone() : null;
      region_ = other.region_;
      isPublisher_ = other.isPublisher_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantInfo Clone() {
      return new ParticipantInfo(this);
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 1;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private string identity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::LiveKit.Proto.ParticipantInfo.Types.State state_ = global::LiveKit.Proto.ParticipantInfo.Types.State.Joining;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ParticipantInfo.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "tracks" field.</summary>
    public const int TracksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.TrackInfo> _repeated_tracks_codec
        = pb::FieldCodec.ForMessage(34, global::LiveKit.Proto.TrackInfo.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.TrackInfo> tracks_ = new pbc::RepeatedField<global::LiveKit.Proto.TrackInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.TrackInfo> Tracks {
      get { return tracks_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private string metadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joined_at" field.</summary>
    public const int JoinedAtFieldNumber = 6;
    private long joinedAt_;
    /// <summary>
    /// timestamp when participant joined room, in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinedAt {
      get { return joinedAt_; }
      set {
        joinedAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 10;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "permission" field.</summary>
    public const int PermissionFieldNumber = 11;
    private global::LiveKit.Proto.ParticipantPermission permission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ParticipantPermission Permission {
      get { return permission_; }
      set {
        permission_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 12;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_publisher" field.</summary>
    public const int IsPublisherFieldNumber = 13;
    private bool isPublisher_;
    /// <summary>
    /// indicates the participant has an active publisher connection
    /// and can publish to the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPublisher {
      get { return isPublisher_; }
      set {
        isPublisher_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticipantInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticipantInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sid != other.Sid) return false;
      if (Identity != other.Identity) return false;
      if (State != other.State) return false;
      if(!tracks_.Equals(other.tracks_)) return false;
      if (Metadata != other.Metadata) return false;
      if (JoinedAt != other.JoinedAt) return false;
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Permission, other.Permission)) return false;
      if (Region != other.Region) return false;
      if (IsPublisher != other.IsPublisher) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (State != global::LiveKit.Proto.ParticipantInfo.Types.State.Joining) hash ^= State.GetHashCode();
      hash ^= tracks_.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (JoinedAt != 0L) hash ^= JoinedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (permission_ != null) hash ^= Permission.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (IsPublisher != false) hash ^= IsPublisher.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (State != global::LiveKit.Proto.ParticipantInfo.Types.State.Joining) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      tracks_.WriteTo(output, _repeated_tracks_codec);
      if (Metadata.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Metadata);
      }
      if (JoinedAt != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(JoinedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (Version != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Version);
      }
      if (permission_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Permission);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Region);
      }
      if (IsPublisher != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPublisher);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (State != global::LiveKit.Proto.ParticipantInfo.Types.State.Joining) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      tracks_.WriteTo(ref output, _repeated_tracks_codec);
      if (Metadata.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Metadata);
      }
      if (JoinedAt != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(JoinedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (Version != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Version);
      }
      if (permission_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Permission);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Region);
      }
      if (IsPublisher != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPublisher);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (State != global::LiveKit.Proto.ParticipantInfo.Types.State.Joining) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += tracks_.CalculateSize(_repeated_tracks_codec);
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (JoinedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (permission_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Permission);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (IsPublisher != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticipantInfo other) {
      if (other == null) {
        return;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.State != global::LiveKit.Proto.ParticipantInfo.Types.State.Joining) {
        State = other.State;
      }
      tracks_.Add(other.tracks_);
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.JoinedAt != 0L) {
        JoinedAt = other.JoinedAt;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.permission_ != null) {
        if (permission_ == null) {
          Permission = new global::LiveKit.Proto.ParticipantPermission();
        }
        Permission.MergeFrom(other.Permission);
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.IsPublisher != false) {
        IsPublisher = other.IsPublisher;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 24: {
            State = (global::LiveKit.Proto.ParticipantInfo.Types.State) input.ReadEnum();
            break;
          }
          case 34: {
            tracks_.AddEntriesFrom(input, _repeated_tracks_codec);
            break;
          }
          case 42: {
            Metadata = input.ReadString();
            break;
          }
          case 48: {
            JoinedAt = input.ReadInt64();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            Version = input.ReadUInt32();
            break;
          }
          case 90: {
            if (permission_ == null) {
              Permission = new global::LiveKit.Proto.ParticipantPermission();
            }
            input.ReadMessage(Permission);
            break;
          }
          case 98: {
            Region = input.ReadString();
            break;
          }
          case 104: {
            IsPublisher = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 24: {
            State = (global::LiveKit.Proto.ParticipantInfo.Types.State) input.ReadEnum();
            break;
          }
          case 34: {
            tracks_.AddEntriesFrom(ref input, _repeated_tracks_codec);
            break;
          }
          case 42: {
            Metadata = input.ReadString();
            break;
          }
          case 48: {
            JoinedAt = input.ReadInt64();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            Version = input.ReadUInt32();
            break;
          }
          case 90: {
            if (permission_ == null) {
              Permission = new global::LiveKit.Proto.ParticipantPermission();
            }
            input.ReadMessage(Permission);
            break;
          }
          case 98: {
            Region = input.ReadString();
            break;
          }
          case 104: {
            IsPublisher = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ParticipantInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        /// <summary>
        /// websocket' connected, but not offered yet
        /// </summary>
        [pbr::OriginalName("JOINING")] Joining = 0,
        /// <summary>
        /// server received client offer
        /// </summary>
        [pbr::OriginalName("JOINED")] Joined = 1,
        /// <summary>
        /// ICE connectivity established
        /// </summary>
        [pbr::OriginalName("ACTIVE")] Active = 2,
        /// <summary>
        /// WS disconnected
        /// </summary>
        [pbr::OriginalName("DISCONNECTED")] Disconnected = 3,
      }

    }
    #endregion

  }

  public sealed partial class Encryption : pb::IMessage<Encryption>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Encryption> _parser = new pb::MessageParser<Encryption>(() => new Encryption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Encryption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encryption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encryption(Encryption other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encryption Clone() {
      return new Encryption(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Encryption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Encryption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Encryption other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Encryption message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("GCM")] Gcm = 1,
        [pbr::OriginalName("CUSTOM")] Custom = 2,
      }

    }
    #endregion

  }

  public sealed partial class SimulcastCodecInfo : pb::IMessage<SimulcastCodecInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SimulcastCodecInfo> _parser = new pb::MessageParser<SimulcastCodecInfo>(() => new SimulcastCodecInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulcastCodecInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulcastCodecInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulcastCodecInfo(SimulcastCodecInfo other) : this() {
      mimeType_ = other.mimeType_;
      mid_ = other.mid_;
      cid_ = other.cid_;
      layers_ = other.layers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulcastCodecInfo Clone() {
      return new SimulcastCodecInfo(this);
    }

    /// <summary>Field number for the "mime_type" field.</summary>
    public const int MimeTypeFieldNumber = 1;
    private string mimeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 2;
    private string mid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mid {
      get { return mid_; }
      set {
        mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 3;
    private string cid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cid {
      get { return cid_; }
      set {
        cid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.VideoLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(34, global::LiveKit.Proto.VideoLayer.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.VideoLayer> layers_ = new pbc::RepeatedField<global::LiveKit.Proto.VideoLayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.VideoLayer> Layers {
      get { return layers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulcastCodecInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulcastCodecInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MimeType != other.MimeType) return false;
      if (Mid != other.Mid) return false;
      if (Cid != other.Cid) return false;
      if(!layers_.Equals(other.layers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
      if (Mid.Length != 0) hash ^= Mid.GetHashCode();
      if (Cid.Length != 0) hash ^= Cid.GetHashCode();
      hash ^= layers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MimeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MimeType);
      }
      if (Mid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mid);
      }
      if (Cid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cid);
      }
      layers_.WriteTo(output, _repeated_layers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MimeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MimeType);
      }
      if (Mid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mid);
      }
      if (Cid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cid);
      }
      layers_.WriteTo(ref output, _repeated_layers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MimeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
      }
      if (Mid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
      }
      if (Cid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cid);
      }
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulcastCodecInfo other) {
      if (other == null) {
        return;
      }
      if (other.MimeType.Length != 0) {
        MimeType = other.MimeType;
      }
      if (other.Mid.Length != 0) {
        Mid = other.Mid;
      }
      if (other.Cid.Length != 0) {
        Cid = other.Cid;
      }
      layers_.Add(other.layers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MimeType = input.ReadString();
            break;
          }
          case 18: {
            Mid = input.ReadString();
            break;
          }
          case 26: {
            Cid = input.ReadString();
            break;
          }
          case 34: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MimeType = input.ReadString();
            break;
          }
          case 18: {
            Mid = input.ReadString();
            break;
          }
          case 26: {
            Cid = input.ReadString();
            break;
          }
          case 34: {
            layers_.AddEntriesFrom(ref input, _repeated_layers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrackInfo : pb::IMessage<TrackInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackInfo> _parser = new pb::MessageParser<TrackInfo>(() => new TrackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackInfo(TrackInfo other) : this() {
      sid_ = other.sid_;
      type_ = other.type_;
      name_ = other.name_;
      muted_ = other.muted_;
      width_ = other.width_;
      height_ = other.height_;
      simulcast_ = other.simulcast_;
      disableDtx_ = other.disableDtx_;
      source_ = other.source_;
      layers_ = other.layers_.Clone();
      mimeType_ = other.mimeType_;
      mid_ = other.mid_;
      codecs_ = other.codecs_.Clone();
      stereo_ = other.stereo_;
      disableRed_ = other.disableRed_;
      encryption_ = other.encryption_;
      stream_ = other.stream_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackInfo Clone() {
      return new TrackInfo(this);
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 1;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::LiveKit.Proto.TrackType type_ = global::LiveKit.Proto.TrackType.Audio;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.TrackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "muted" field.</summary>
    public const int MutedFieldNumber = 4;
    private bool muted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Muted {
      get { return muted_; }
      set {
        muted_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private uint width_;
    /// <summary>
    /// original width of video (unset for audio)
    /// clients may receive a lower resolution version with simulcast
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private uint height_;
    /// <summary>
    /// original height of video (unset for audio)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "simulcast" field.</summary>
    public const int SimulcastFieldNumber = 7;
    private bool simulcast_;
    /// <summary>
    /// true if track is simulcasted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Simulcast {
      get { return simulcast_; }
      set {
        simulcast_ = value;
      }
    }

    /// <summary>Field number for the "disable_dtx" field.</summary>
    public const int DisableDtxFieldNumber = 8;
    private bool disableDtx_;
    /// <summary>
    /// true if DTX (Discontinuous Transmission) is disabled for audio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableDtx {
      get { return disableDtx_; }
      set {
        disableDtx_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 9;
    private global::LiveKit.Proto.TrackSource source_ = global::LiveKit.Proto.TrackSource.Unknown;
    /// <summary>
    /// source of media
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.TrackSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.VideoLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(82, global::LiveKit.Proto.VideoLayer.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.VideoLayer> layers_ = new pbc::RepeatedField<global::LiveKit.Proto.VideoLayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.VideoLayer> Layers {
      get { return layers_; }
    }

    /// <summary>Field number for the "mime_type" field.</summary>
    public const int MimeTypeFieldNumber = 11;
    private string mimeType_ = "";
    /// <summary>
    /// mime type of codec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 12;
    private string mid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mid {
      get { return mid_; }
      set {
        mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "codecs" field.</summary>
    public const int CodecsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.SimulcastCodecInfo> _repeated_codecs_codec
        = pb::FieldCodec.ForMessage(106, global::LiveKit.Proto.SimulcastCodecInfo.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.SimulcastCodecInfo> codecs_ = new pbc::RepeatedField<global::LiveKit.Proto.SimulcastCodecInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.SimulcastCodecInfo> Codecs {
      get { return codecs_; }
    }

    /// <summary>Field number for the "stereo" field.</summary>
    public const int StereoFieldNumber = 14;
    private bool stereo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stereo {
      get { return stereo_; }
      set {
        stereo_ = value;
      }
    }

    /// <summary>Field number for the "disable_red" field.</summary>
    public const int DisableRedFieldNumber = 15;
    private bool disableRed_;
    /// <summary>
    /// true if RED (Redundant Encoding) is disabled for audio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableRed {
      get { return disableRed_; }
      set {
        disableRed_ = value;
      }
    }

    /// <summary>Field number for the "encryption" field.</summary>
    public const int EncryptionFieldNumber = 16;
    private global::LiveKit.Proto.Encryption.Types.Type encryption_ = global::LiveKit.Proto.Encryption.Types.Type.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.Encryption.Types.Type Encryption {
      get { return encryption_; }
      set {
        encryption_ = value;
      }
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 17;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sid != other.Sid) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Muted != other.Muted) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Simulcast != other.Simulcast) return false;
      if (DisableDtx != other.DisableDtx) return false;
      if (Source != other.Source) return false;
      if(!layers_.Equals(other.layers_)) return false;
      if (MimeType != other.MimeType) return false;
      if (Mid != other.Mid) return false;
      if(!codecs_.Equals(other.codecs_)) return false;
      if (Stereo != other.Stereo) return false;
      if (DisableRed != other.DisableRed) return false;
      if (Encryption != other.Encryption) return false;
      if (Stream != other.Stream) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (Type != global::LiveKit.Proto.TrackType.Audio) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Muted != false) hash ^= Muted.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Simulcast != false) hash ^= Simulcast.GetHashCode();
      if (DisableDtx != false) hash ^= DisableDtx.GetHashCode();
      if (Source != global::LiveKit.Proto.TrackSource.Unknown) hash ^= Source.GetHashCode();
      hash ^= layers_.GetHashCode();
      if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
      if (Mid.Length != 0) hash ^= Mid.GetHashCode();
      hash ^= codecs_.GetHashCode();
      if (Stereo != false) hash ^= Stereo.GetHashCode();
      if (DisableRed != false) hash ^= DisableRed.GetHashCode();
      if (Encryption != global::LiveKit.Proto.Encryption.Types.Type.None) hash ^= Encryption.GetHashCode();
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Type != global::LiveKit.Proto.TrackType.Audio) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Muted != false) {
        output.WriteRawTag(32);
        output.WriteBool(Muted);
      }
      if (Width != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Height);
      }
      if (Simulcast != false) {
        output.WriteRawTag(56);
        output.WriteBool(Simulcast);
      }
      if (DisableDtx != false) {
        output.WriteRawTag(64);
        output.WriteBool(DisableDtx);
      }
      if (Source != global::LiveKit.Proto.TrackSource.Unknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Source);
      }
      layers_.WriteTo(output, _repeated_layers_codec);
      if (MimeType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MimeType);
      }
      if (Mid.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Mid);
      }
      codecs_.WriteTo(output, _repeated_codecs_codec);
      if (Stereo != false) {
        output.WriteRawTag(112);
        output.WriteBool(Stereo);
      }
      if (DisableRed != false) {
        output.WriteRawTag(120);
        output.WriteBool(DisableRed);
      }
      if (Encryption != global::LiveKit.Proto.Encryption.Types.Type.None) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Encryption);
      }
      if (Stream.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Stream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Type != global::LiveKit.Proto.TrackType.Audio) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Muted != false) {
        output.WriteRawTag(32);
        output.WriteBool(Muted);
      }
      if (Width != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Height);
      }
      if (Simulcast != false) {
        output.WriteRawTag(56);
        output.WriteBool(Simulcast);
      }
      if (DisableDtx != false) {
        output.WriteRawTag(64);
        output.WriteBool(DisableDtx);
      }
      if (Source != global::LiveKit.Proto.TrackSource.Unknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Source);
      }
      layers_.WriteTo(ref output, _repeated_layers_codec);
      if (MimeType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MimeType);
      }
      if (Mid.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Mid);
      }
      codecs_.WriteTo(ref output, _repeated_codecs_codec);
      if (Stereo != false) {
        output.WriteRawTag(112);
        output.WriteBool(Stereo);
      }
      if (DisableRed != false) {
        output.WriteRawTag(120);
        output.WriteBool(DisableRed);
      }
      if (Encryption != global::LiveKit.Proto.Encryption.Types.Type.None) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Encryption);
      }
      if (Stream.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Stream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (Type != global::LiveKit.Proto.TrackType.Audio) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Muted != false) {
        size += 1 + 1;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Simulcast != false) {
        size += 1 + 1;
      }
      if (DisableDtx != false) {
        size += 1 + 1;
      }
      if (Source != global::LiveKit.Proto.TrackSource.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (MimeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
      }
      if (Mid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
      }
      size += codecs_.CalculateSize(_repeated_codecs_codec);
      if (Stereo != false) {
        size += 1 + 1;
      }
      if (DisableRed != false) {
        size += 1 + 1;
      }
      if (Encryption != global::LiveKit.Proto.Encryption.Types.Type.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Encryption);
      }
      if (Stream.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackInfo other) {
      if (other == null) {
        return;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      if (other.Type != global::LiveKit.Proto.TrackType.Audio) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Muted != false) {
        Muted = other.Muted;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Simulcast != false) {
        Simulcast = other.Simulcast;
      }
      if (other.DisableDtx != false) {
        DisableDtx = other.DisableDtx;
      }
      if (other.Source != global::LiveKit.Proto.TrackSource.Unknown) {
        Source = other.Source;
      }
      layers_.Add(other.layers_);
      if (other.MimeType.Length != 0) {
        MimeType = other.MimeType;
      }
      if (other.Mid.Length != 0) {
        Mid = other.Mid;
      }
      codecs_.Add(other.codecs_);
      if (other.Stereo != false) {
        Stereo = other.Stereo;
      }
      if (other.DisableRed != false) {
        DisableRed = other.DisableRed;
      }
      if (other.Encryption != global::LiveKit.Proto.Encryption.Types.Type.None) {
        Encryption = other.Encryption;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::LiveKit.Proto.TrackType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Muted = input.ReadBool();
            break;
          }
          case 40: {
            Width = input.ReadUInt32();
            break;
          }
          case 48: {
            Height = input.ReadUInt32();
            break;
          }
          case 56: {
            Simulcast = input.ReadBool();
            break;
          }
          case 64: {
            DisableDtx = input.ReadBool();
            break;
          }
          case 72: {
            Source = (global::LiveKit.Proto.TrackSource) input.ReadEnum();
            break;
          }
          case 82: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 90: {
            MimeType = input.ReadString();
            break;
          }
          case 98: {
            Mid = input.ReadString();
            break;
          }
          case 106: {
            codecs_.AddEntriesFrom(input, _repeated_codecs_codec);
            break;
          }
          case 112: {
            Stereo = input.ReadBool();
            break;
          }
          case 120: {
            DisableRed = input.ReadBool();
            break;
          }
          case 128: {
            Encryption = (global::LiveKit.Proto.Encryption.Types.Type) input.ReadEnum();
            break;
          }
          case 138: {
            Stream = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::LiveKit.Proto.TrackType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Muted = input.ReadBool();
            break;
          }
          case 40: {
            Width = input.ReadUInt32();
            break;
          }
          case 48: {
            Height = input.ReadUInt32();
            break;
          }
          case 56: {
            Simulcast = input.ReadBool();
            break;
          }
          case 64: {
            DisableDtx = input.ReadBool();
            break;
          }
          case 72: {
            Source = (global::LiveKit.Proto.TrackSource) input.ReadEnum();
            break;
          }
          case 82: {
            layers_.AddEntriesFrom(ref input, _repeated_layers_codec);
            break;
          }
          case 90: {
            MimeType = input.ReadString();
            break;
          }
          case 98: {
            Mid = input.ReadString();
            break;
          }
          case 106: {
            codecs_.AddEntriesFrom(ref input, _repeated_codecs_codec);
            break;
          }
          case 112: {
            Stereo = input.ReadBool();
            break;
          }
          case 120: {
            DisableRed = input.ReadBool();
            break;
          }
          case 128: {
            Encryption = (global::LiveKit.Proto.Encryption.Types.Type) input.ReadEnum();
            break;
          }
          case 138: {
            Stream = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// provide information about available spatial layers
  /// </summary>
  public sealed partial class VideoLayer : pb::IMessage<VideoLayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VideoLayer> _parser = new pb::MessageParser<VideoLayer>(() => new VideoLayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoLayer(VideoLayer other) : this() {
      quality_ = other.quality_;
      width_ = other.width_;
      height_ = other.height_;
      bitrate_ = other.bitrate_;
      ssrc_ = other.ssrc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoLayer Clone() {
      return new VideoLayer(this);
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 1;
    private global::LiveKit.Proto.VideoQuality quality_ = global::LiveKit.Proto.VideoQuality.Low;
    /// <summary>
    /// for tracks with a single layer, this should be HIGH
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.VideoQuality Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 4;
    private uint bitrate_;
    /// <summary>
    /// target bitrate in bit per second (bps), server will measure actual
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }

    /// <summary>Field number for the "ssrc" field.</summary>
    public const int SsrcFieldNumber = 5;
    private uint ssrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ssrc {
      get { return ssrc_; }
      set {
        ssrc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quality != other.Quality) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Bitrate != other.Bitrate) return false;
      if (Ssrc != other.Ssrc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Quality != global::LiveKit.Proto.VideoQuality.Low) hash ^= Quality.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Bitrate != 0) hash ^= Bitrate.GetHashCode();
      if (Ssrc != 0) hash ^= Ssrc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Quality != global::LiveKit.Proto.VideoQuality.Low) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Quality);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Bitrate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Bitrate);
      }
      if (Ssrc != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Ssrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Quality != global::LiveKit.Proto.VideoQuality.Low) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Quality);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Bitrate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Bitrate);
      }
      if (Ssrc != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Ssrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quality != global::LiveKit.Proto.VideoQuality.Low) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Bitrate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bitrate);
      }
      if (Ssrc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ssrc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoLayer other) {
      if (other == null) {
        return;
      }
      if (other.Quality != global::LiveKit.Proto.VideoQuality.Low) {
        Quality = other.Quality;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Bitrate != 0) {
        Bitrate = other.Bitrate;
      }
      if (other.Ssrc != 0) {
        Ssrc = other.Ssrc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Quality = (global::LiveKit.Proto.VideoQuality) input.ReadEnum();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            Bitrate = input.ReadUInt32();
            break;
          }
          case 40: {
            Ssrc = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Quality = (global::LiveKit.Proto.VideoQuality) input.ReadEnum();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            Bitrate = input.ReadUInt32();
            break;
          }
          case 40: {
            Ssrc = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// new DataPacket API
  /// </summary>
  public sealed partial class DataPacket : pb::IMessage<DataPacket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataPacket> _parser = new pb::MessageParser<DataPacket>(() => new DataPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPacket(DataPacket other) : this() {
      kind_ = other.kind_;
      switch (other.ValueCase) {
        case ValueOneofCase.User:
          User = other.User.Clone();
          break;
        case ValueOneofCase.Speaker:
          Speaker = other.Speaker.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPacket Clone() {
      return new DataPacket(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::LiveKit.Proto.DataPacket.Types.Kind kind_ = global::LiveKit.Proto.DataPacket.Types.Kind.Reliable;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.DataPacket.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.UserPacket User {
      get { return valueCase_ == ValueOneofCase.User ? (global::LiveKit.Proto.UserPacket) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.User;
      }
    }

    /// <summary>Field number for the "speaker" field.</summary>
    public const int SpeakerFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ActiveSpeakerUpdate Speaker {
      get { return valueCase_ == ValueOneofCase.Speaker ? (global::LiveKit.Proto.ActiveSpeakerUpdate) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Speaker;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      User = 2,
      Speaker = 3,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Speaker, other.Speaker)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != global::LiveKit.Proto.DataPacket.Types.Kind.Reliable) hash ^= Kind.GetHashCode();
      if (valueCase_ == ValueOneofCase.User) hash ^= User.GetHashCode();
      if (valueCase_ == ValueOneofCase.Speaker) hash ^= Speaker.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Kind != global::LiveKit.Proto.DataPacket.Types.Kind.Reliable) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (valueCase_ == ValueOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (valueCase_ == ValueOneofCase.Speaker) {
        output.WriteRawTag(26);
        output.WriteMessage(Speaker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Kind != global::LiveKit.Proto.DataPacket.Types.Kind.Reliable) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (valueCase_ == ValueOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (valueCase_ == ValueOneofCase.Speaker) {
        output.WriteRawTag(26);
        output.WriteMessage(Speaker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != global::LiveKit.Proto.DataPacket.Types.Kind.Reliable) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (valueCase_ == ValueOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (valueCase_ == ValueOneofCase.Speaker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speaker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPacket other) {
      if (other == null) {
        return;
      }
      if (other.Kind != global::LiveKit.Proto.DataPacket.Types.Kind.Reliable) {
        Kind = other.Kind;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.User:
          if (User == null) {
            User = new global::LiveKit.Proto.UserPacket();
          }
          User.MergeFrom(other.User);
          break;
        case ValueOneofCase.Speaker:
          if (Speaker == null) {
            Speaker = new global::LiveKit.Proto.ActiveSpeakerUpdate();
          }
          Speaker.MergeFrom(other.Speaker);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::LiveKit.Proto.DataPacket.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            global::LiveKit.Proto.UserPacket subBuilder = new global::LiveKit.Proto.UserPacket();
            if (valueCase_ == ValueOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::LiveKit.Proto.ActiveSpeakerUpdate subBuilder = new global::LiveKit.Proto.ActiveSpeakerUpdate();
            if (valueCase_ == ValueOneofCase.Speaker) {
              subBuilder.MergeFrom(Speaker);
            }
            input.ReadMessage(subBuilder);
            Speaker = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Kind = (global::LiveKit.Proto.DataPacket.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            global::LiveKit.Proto.UserPacket subBuilder = new global::LiveKit.Proto.UserPacket();
            if (valueCase_ == ValueOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::LiveKit.Proto.ActiveSpeakerUpdate subBuilder = new global::LiveKit.Proto.ActiveSpeakerUpdate();
            if (valueCase_ == ValueOneofCase.Speaker) {
              subBuilder.MergeFrom(Speaker);
            }
            input.ReadMessage(subBuilder);
            Speaker = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DataPacket message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("RELIABLE")] Reliable = 0,
        [pbr::OriginalName("LOSSY")] Lossy = 1,
      }

    }
    #endregion

  }

  public sealed partial class ActiveSpeakerUpdate : pb::IMessage<ActiveSpeakerUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActiveSpeakerUpdate> _parser = new pb::MessageParser<ActiveSpeakerUpdate>(() => new ActiveSpeakerUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveSpeakerUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpeakerUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpeakerUpdate(ActiveSpeakerUpdate other) : this() {
      speakers_ = other.speakers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveSpeakerUpdate Clone() {
      return new ActiveSpeakerUpdate(this);
    }

    /// <summary>Field number for the "speakers" field.</summary>
    public const int SpeakersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.SpeakerInfo> _repeated_speakers_codec
        = pb::FieldCodec.ForMessage(10, global::LiveKit.Proto.SpeakerInfo.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.SpeakerInfo> speakers_ = new pbc::RepeatedField<global::LiveKit.Proto.SpeakerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.SpeakerInfo> Speakers {
      get { return speakers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveSpeakerUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveSpeakerUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!speakers_.Equals(other.speakers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= speakers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      speakers_.WriteTo(output, _repeated_speakers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      speakers_.WriteTo(ref output, _repeated_speakers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += speakers_.CalculateSize(_repeated_speakers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveSpeakerUpdate other) {
      if (other == null) {
        return;
      }
      speakers_.Add(other.speakers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            speakers_.AddEntriesFrom(input, _repeated_speakers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            speakers_.AddEntriesFrom(ref input, _repeated_speakers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpeakerInfo : pb::IMessage<SpeakerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpeakerInfo> _parser = new pb::MessageParser<SpeakerInfo>(() => new SpeakerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeakerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeakerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeakerInfo(SpeakerInfo other) : this() {
      sid_ = other.sid_;
      level_ = other.level_;
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeakerInfo Clone() {
      return new SpeakerInfo(this);
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 1;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private float level_;
    /// <summary>
    /// audio level, 0-1.0, 1 is loudest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 3;
    private bool active_;
    /// <summary>
    /// true if speaker is currently active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeakerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeakerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sid != other.Sid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Level, other.Level)) return false;
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (Level != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Level);
      if (Active != false) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Level != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Level);
      }
      if (Active != false) {
        output.WriteRawTag(24);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (Level != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Level);
      }
      if (Active != false) {
        output.WriteRawTag(24);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (Level != 0F) {
        size += 1 + 4;
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeakerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      if (other.Level != 0F) {
        Level = other.Level;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 21: {
            Level = input.ReadFloat();
            break;
          }
          case 24: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 21: {
            Level = input.ReadFloat();
            break;
          }
          case 24: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserPacket : pb::IMessage<UserPacket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserPacket> _parser = new pb::MessageParser<UserPacket>(() => new UserPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPacket(UserPacket other) : this() {
      participantSid_ = other.participantSid_;
      participantIdentity_ = other.participantIdentity_;
      payload_ = other.payload_;
      destinationSids_ = other.destinationSids_.Clone();
      destinationIdentities_ = other.destinationIdentities_.Clone();
      topic_ = other.topic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPacket Clone() {
      return new UserPacket(this);
    }

    /// <summary>Field number for the "participant_sid" field.</summary>
    public const int ParticipantSidFieldNumber = 1;
    private string participantSid_ = "";
    /// <summary>
    /// participant ID of user that sent the message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParticipantSid {
      get { return participantSid_; }
      set {
        participantSid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "participant_identity" field.</summary>
    public const int ParticipantIdentityFieldNumber = 5;
    private string participantIdentity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParticipantIdentity {
      get { return participantIdentity_; }
      set {
        participantIdentity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// user defined payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_sids" field.</summary>
    public const int DestinationSidsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_destinationSids_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> destinationSids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the ID of the participants who will receive the message (sent to all by default)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestinationSids {
      get { return destinationSids_; }
    }

    /// <summary>Field number for the "destination_identities" field.</summary>
    public const int DestinationIdentitiesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_destinationIdentities_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> destinationIdentities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// identities of participants who will receive the message (sent to all by default)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestinationIdentities {
      get { return destinationIdentities_; }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 4;
    private string topic_;
    /// <summary>
    /// topic under which the message was published
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? ""; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParticipantSid != other.ParticipantSid) return false;
      if (ParticipantIdentity != other.ParticipantIdentity) return false;
      if (Payload != other.Payload) return false;
      if(!destinationSids_.Equals(other.destinationSids_)) return false;
      if(!destinationIdentities_.Equals(other.destinationIdentities_)) return false;
      if (Topic != other.Topic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParticipantSid.Length != 0) hash ^= ParticipantSid.GetHashCode();
      if (ParticipantIdentity.Length != 0) hash ^= ParticipantIdentity.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      hash ^= destinationSids_.GetHashCode();
      hash ^= destinationIdentities_.GetHashCode();
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ParticipantSid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParticipantSid);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      destinationSids_.WriteTo(output, _repeated_destinationSids_codec);
      if (HasTopic) {
        output.WriteRawTag(34);
        output.WriteString(Topic);
      }
      if (ParticipantIdentity.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ParticipantIdentity);
      }
      destinationIdentities_.WriteTo(output, _repeated_destinationIdentities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ParticipantSid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParticipantSid);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      destinationSids_.WriteTo(ref output, _repeated_destinationSids_codec);
      if (HasTopic) {
        output.WriteRawTag(34);
        output.WriteString(Topic);
      }
      if (ParticipantIdentity.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ParticipantIdentity);
      }
      destinationIdentities_.WriteTo(ref output, _repeated_destinationIdentities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParticipantSid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParticipantSid);
      }
      if (ParticipantIdentity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParticipantIdentity);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      size += destinationSids_.CalculateSize(_repeated_destinationSids_codec);
      size += destinationIdentities_.CalculateSize(_repeated_destinationIdentities_codec);
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPacket other) {
      if (other == null) {
        return;
      }
      if (other.ParticipantSid.Length != 0) {
        ParticipantSid = other.ParticipantSid;
      }
      if (other.ParticipantIdentity.Length != 0) {
        ParticipantIdentity = other.ParticipantIdentity;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      destinationSids_.Add(other.destinationSids_);
      destinationIdentities_.Add(other.destinationIdentities_);
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParticipantSid = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 26: {
            destinationSids_.AddEntriesFrom(input, _repeated_destinationSids_codec);
            break;
          }
          case 34: {
            Topic = input.ReadString();
            break;
          }
          case 42: {
            ParticipantIdentity = input.ReadString();
            break;
          }
          case 50: {
            destinationIdentities_.AddEntriesFrom(input, _repeated_destinationIdentities_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ParticipantSid = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 26: {
            destinationSids_.AddEntriesFrom(ref input, _repeated_destinationSids_codec);
            break;
          }
          case 34: {
            Topic = input.ReadString();
            break;
          }
          case 42: {
            ParticipantIdentity = input.ReadString();
            break;
          }
          case 50: {
            destinationIdentities_.AddEntriesFrom(ref input, _repeated_destinationIdentities_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ParticipantTracks : pb::IMessage<ParticipantTracks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParticipantTracks> _parser = new pb::MessageParser<ParticipantTracks>(() => new ParticipantTracks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticipantTracks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantTracks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantTracks(ParticipantTracks other) : this() {
      participantSid_ = other.participantSid_;
      trackSids_ = other.trackSids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipantTracks Clone() {
      return new ParticipantTracks(this);
    }

    /// <summary>Field number for the "participant_sid" field.</summary>
    public const int ParticipantSidFieldNumber = 1;
    private string participantSid_ = "";
    /// <summary>
    /// participant ID of participant to whom the tracks belong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParticipantSid {
      get { return participantSid_; }
      set {
        participantSid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "track_sids" field.</summary>
    public const int TrackSidsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_trackSids_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> trackSids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TrackSids {
      get { return trackSids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticipantTracks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticipantTracks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParticipantSid != other.ParticipantSid) return false;
      if(!trackSids_.Equals(other.trackSids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParticipantSid.Length != 0) hash ^= ParticipantSid.GetHashCode();
      hash ^= trackSids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ParticipantSid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParticipantSid);
      }
      trackSids_.WriteTo(output, _repeated_trackSids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ParticipantSid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParticipantSid);
      }
      trackSids_.WriteTo(ref output, _repeated_trackSids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParticipantSid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParticipantSid);
      }
      size += trackSids_.CalculateSize(_repeated_trackSids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticipantTracks other) {
      if (other == null) {
        return;
      }
      if (other.ParticipantSid.Length != 0) {
        ParticipantSid = other.ParticipantSid;
      }
      trackSids_.Add(other.trackSids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParticipantSid = input.ReadString();
            break;
          }
          case 18: {
            trackSids_.AddEntriesFrom(input, _repeated_trackSids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ParticipantSid = input.ReadString();
            break;
          }
          case 18: {
            trackSids_.AddEntriesFrom(ref input, _repeated_trackSids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// details about the server
  /// </summary>
  public sealed partial class ServerInfo : pb::IMessage<ServerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      edition_ = other.edition_;
      version_ = other.version_;
      protocol_ = other.protocol_;
      region_ = other.region_;
      nodeId_ = other.nodeId_;
      debugInfo_ = other.debugInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "edition" field.</summary>
    public const int EditionFieldNumber = 1;
    private global::LiveKit.Proto.ServerInfo.Types.Edition edition_ = global::LiveKit.Proto.ServerInfo.Types.Edition.Standard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ServerInfo.Types.Edition Edition {
      get { return edition_; }
      set {
        edition_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 3;
    private int protocol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 4;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 5;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 6;
    private string debugInfo_ = "";
    /// <summary>
    /// additional debugging information. sent only if server is in development mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Edition != other.Edition) return false;
      if (Version != other.Version) return false;
      if (Protocol != other.Protocol) return false;
      if (Region != other.Region) return false;
      if (NodeId != other.NodeId) return false;
      if (DebugInfo != other.DebugInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Edition != global::LiveKit.Proto.ServerInfo.Types.Edition.Standard) hash ^= Edition.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Protocol != 0) hash ^= Protocol.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (DebugInfo.Length != 0) hash ^= DebugInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Edition != global::LiveKit.Proto.ServerInfo.Types.Edition.Standard) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Edition);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Protocol != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Protocol);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Region);
      }
      if (NodeId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NodeId);
      }
      if (DebugInfo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DebugInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Edition != global::LiveKit.Proto.ServerInfo.Types.Edition.Standard) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Edition);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Protocol != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Protocol);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Region);
      }
      if (NodeId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NodeId);
      }
      if (DebugInfo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DebugInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Edition != global::LiveKit.Proto.ServerInfo.Types.Edition.Standard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Edition);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Protocol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protocol);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (DebugInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Edition != global::LiveKit.Proto.ServerInfo.Types.Edition.Standard) {
        Edition = other.Edition;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Protocol != 0) {
        Protocol = other.Protocol;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.DebugInfo.Length != 0) {
        DebugInfo = other.DebugInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Edition = (global::LiveKit.Proto.ServerInfo.Types.Edition) input.ReadEnum();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Protocol = input.ReadInt32();
            break;
          }
          case 34: {
            Region = input.ReadString();
            break;
          }
          case 42: {
            NodeId = input.ReadString();
            break;
          }
          case 50: {
            DebugInfo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Edition = (global::LiveKit.Proto.ServerInfo.Types.Edition) input.ReadEnum();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Protocol = input.ReadInt32();
            break;
          }
          case 34: {
            Region = input.ReadString();
            break;
          }
          case 42: {
            NodeId = input.ReadString();
            break;
          }
          case 50: {
            DebugInfo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ServerInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Edition {
        [pbr::OriginalName("Standard")] Standard = 0,
        [pbr::OriginalName("Cloud")] Cloud = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// details about the client
  /// </summary>
  public sealed partial class ClientInfo : pb::IMessage<ClientInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientInfo> _parser = new pb::MessageParser<ClientInfo>(() => new ClientInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo(ClientInfo other) : this() {
      sdk_ = other.sdk_;
      version_ = other.version_;
      protocol_ = other.protocol_;
      os_ = other.os_;
      osVersion_ = other.osVersion_;
      deviceModel_ = other.deviceModel_;
      browser_ = other.browser_;
      browserVersion_ = other.browserVersion_;
      address_ = other.address_;
      network_ = other.network_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo Clone() {
      return new ClientInfo(this);
    }

    /// <summary>Field number for the "sdk" field.</summary>
    public const int SdkFieldNumber = 1;
    private global::LiveKit.Proto.ClientInfo.Types.SDK sdk_ = global::LiveKit.Proto.ClientInfo.Types.SDK.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ClientInfo.Types.SDK Sdk {
      get { return sdk_; }
      set {
        sdk_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 3;
    private int protocol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 4;
    private string os_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os_version" field.</summary>
    public const int OsVersionFieldNumber = 5;
    private string osVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_model" field.</summary>
    public const int DeviceModelFieldNumber = 6;
    private string deviceModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModel {
      get { return deviceModel_; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "browser" field.</summary>
    public const int BrowserFieldNumber = 7;
    private string browser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Browser {
      get { return browser_; }
      set {
        browser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "browser_version" field.</summary>
    public const int BrowserVersionFieldNumber = 8;
    private string browserVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrowserVersion {
      get { return browserVersion_; }
      set {
        browserVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 9;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 10;
    private string network_ = "";
    /// <summary>
    /// wifi, wired, cellular, vpn, empty if not known
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sdk != other.Sdk) return false;
      if (Version != other.Version) return false;
      if (Protocol != other.Protocol) return false;
      if (Os != other.Os) return false;
      if (OsVersion != other.OsVersion) return false;
      if (DeviceModel != other.DeviceModel) return false;
      if (Browser != other.Browser) return false;
      if (BrowserVersion != other.BrowserVersion) return false;
      if (Address != other.Address) return false;
      if (Network != other.Network) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sdk != global::LiveKit.Proto.ClientInfo.Types.SDK.Unknown) hash ^= Sdk.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Protocol != 0) hash ^= Protocol.GetHashCode();
      if (Os.Length != 0) hash ^= Os.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
      if (Browser.Length != 0) hash ^= Browser.GetHashCode();
      if (BrowserVersion.Length != 0) hash ^= BrowserVersion.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sdk != global::LiveKit.Proto.ClientInfo.Types.SDK.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Sdk);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Protocol != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Protocol);
      }
      if (Os.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Os);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OsVersion);
      }
      if (DeviceModel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceModel);
      }
      if (Browser.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Browser);
      }
      if (BrowserVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BrowserVersion);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Address);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sdk != global::LiveKit.Proto.ClientInfo.Types.SDK.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Sdk);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Protocol != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Protocol);
      }
      if (Os.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Os);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OsVersion);
      }
      if (DeviceModel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceModel);
      }
      if (Browser.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Browser);
      }
      if (BrowserVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BrowserVersion);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Address);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sdk != global::LiveKit.Proto.ClientInfo.Types.SDK.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sdk);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Protocol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Protocol);
      }
      if (Os.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (DeviceModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      if (Browser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Browser);
      }
      if (BrowserVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrowserVersion);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientInfo other) {
      if (other == null) {
        return;
      }
      if (other.Sdk != global::LiveKit.Proto.ClientInfo.Types.SDK.Unknown) {
        Sdk = other.Sdk;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Protocol != 0) {
        Protocol = other.Protocol;
      }
      if (other.Os.Length != 0) {
        Os = other.Os;
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.DeviceModel.Length != 0) {
        DeviceModel = other.DeviceModel;
      }
      if (other.Browser.Length != 0) {
        Browser = other.Browser;
      }
      if (other.BrowserVersion.Length != 0) {
        BrowserVersion = other.BrowserVersion;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sdk = (global::LiveKit.Proto.ClientInfo.Types.SDK) input.ReadEnum();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Protocol = input.ReadInt32();
            break;
          }
          case 34: {
            Os = input.ReadString();
            break;
          }
          case 42: {
            OsVersion = input.ReadString();
            break;
          }
          case 50: {
            DeviceModel = input.ReadString();
            break;
          }
          case 58: {
            Browser = input.ReadString();
            break;
          }
          case 66: {
            BrowserVersion = input.ReadString();
            break;
          }
          case 74: {
            Address = input.ReadString();
            break;
          }
          case 82: {
            Network = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sdk = (global::LiveKit.Proto.ClientInfo.Types.SDK) input.ReadEnum();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Protocol = input.ReadInt32();
            break;
          }
          case 34: {
            Os = input.ReadString();
            break;
          }
          case 42: {
            OsVersion = input.ReadString();
            break;
          }
          case 50: {
            DeviceModel = input.ReadString();
            break;
          }
          case 58: {
            Browser = input.ReadString();
            break;
          }
          case 66: {
            BrowserVersion = input.ReadString();
            break;
          }
          case 74: {
            Address = input.ReadString();
            break;
          }
          case 82: {
            Network = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ClientInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SDK {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("JS")] Js = 1,
        [pbr::OriginalName("SWIFT")] Swift = 2,
        [pbr::OriginalName("ANDROID")] Android = 3,
        [pbr::OriginalName("FLUTTER")] Flutter = 4,
        [pbr::OriginalName("GO")] Go = 5,
        [pbr::OriginalName("UNITY")] Unity = 6,
        [pbr::OriginalName("REACT_NATIVE")] ReactNative = 7,
        [pbr::OriginalName("RUST")] Rust = 8,
        [pbr::OriginalName("PYTHON")] Python = 9,
        [pbr::OriginalName("CPP")] Cpp = 10,
      }

    }
    #endregion

  }

  /// <summary>
  /// server provided client configuration
  /// </summary>
  public sealed partial class ClientConfiguration : pb::IMessage<ClientConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientConfiguration> _parser = new pb::MessageParser<ClientConfiguration>(() => new ClientConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfiguration(ClientConfiguration other) : this() {
      video_ = other.video_ != null ? other.video_.Clone() : null;
      screen_ = other.screen_ != null ? other.screen_.Clone() : null;
      resumeConnection_ = other.resumeConnection_;
      disabledCodecs_ = other.disabledCodecs_ != null ? other.disabledCodecs_.Clone() : null;
      forceRelay_ = other.forceRelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfiguration Clone() {
      return new ClientConfiguration(this);
    }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 1;
    private global::LiveKit.Proto.VideoConfiguration video_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.VideoConfiguration Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "screen" field.</summary>
    public const int ScreenFieldNumber = 2;
    private global::LiveKit.Proto.VideoConfiguration screen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.VideoConfiguration Screen {
      get { return screen_; }
      set {
        screen_ = value;
      }
    }

    /// <summary>Field number for the "resume_connection" field.</summary>
    public const int ResumeConnectionFieldNumber = 3;
    private global::LiveKit.Proto.ClientConfigSetting resumeConnection_ = global::LiveKit.Proto.ClientConfigSetting.Unset;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ClientConfigSetting ResumeConnection {
      get { return resumeConnection_; }
      set {
        resumeConnection_ = value;
      }
    }

    /// <summary>Field number for the "disabled_codecs" field.</summary>
    public const int DisabledCodecsFieldNumber = 4;
    private global::LiveKit.Proto.DisabledCodecs disabledCodecs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.DisabledCodecs DisabledCodecs {
      get { return disabledCodecs_; }
      set {
        disabledCodecs_ = value;
      }
    }

    /// <summary>Field number for the "force_relay" field.</summary>
    public const int ForceRelayFieldNumber = 5;
    private global::LiveKit.Proto.ClientConfigSetting forceRelay_ = global::LiveKit.Proto.ClientConfigSetting.Unset;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ClientConfigSetting ForceRelay {
      get { return forceRelay_; }
      set {
        forceRelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Video, other.Video)) return false;
      if (!object.Equals(Screen, other.Screen)) return false;
      if (ResumeConnection != other.ResumeConnection) return false;
      if (!object.Equals(DisabledCodecs, other.DisabledCodecs)) return false;
      if (ForceRelay != other.ForceRelay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (video_ != null) hash ^= Video.GetHashCode();
      if (screen_ != null) hash ^= Screen.GetHashCode();
      if (ResumeConnection != global::LiveKit.Proto.ClientConfigSetting.Unset) hash ^= ResumeConnection.GetHashCode();
      if (disabledCodecs_ != null) hash ^= DisabledCodecs.GetHashCode();
      if (ForceRelay != global::LiveKit.Proto.ClientConfigSetting.Unset) hash ^= ForceRelay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (video_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Video);
      }
      if (screen_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Screen);
      }
      if (ResumeConnection != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResumeConnection);
      }
      if (disabledCodecs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DisabledCodecs);
      }
      if (ForceRelay != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ForceRelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (video_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Video);
      }
      if (screen_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Screen);
      }
      if (ResumeConnection != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ResumeConnection);
      }
      if (disabledCodecs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DisabledCodecs);
      }
      if (ForceRelay != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ForceRelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      if (screen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Screen);
      }
      if (ResumeConnection != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResumeConnection);
      }
      if (disabledCodecs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisabledCodecs);
      }
      if (ForceRelay != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ForceRelay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.video_ != null) {
        if (video_ == null) {
          Video = new global::LiveKit.Proto.VideoConfiguration();
        }
        Video.MergeFrom(other.Video);
      }
      if (other.screen_ != null) {
        if (screen_ == null) {
          Screen = new global::LiveKit.Proto.VideoConfiguration();
        }
        Screen.MergeFrom(other.Screen);
      }
      if (other.ResumeConnection != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        ResumeConnection = other.ResumeConnection;
      }
      if (other.disabledCodecs_ != null) {
        if (disabledCodecs_ == null) {
          DisabledCodecs = new global::LiveKit.Proto.DisabledCodecs();
        }
        DisabledCodecs.MergeFrom(other.DisabledCodecs);
      }
      if (other.ForceRelay != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        ForceRelay = other.ForceRelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (video_ == null) {
              Video = new global::LiveKit.Proto.VideoConfiguration();
            }
            input.ReadMessage(Video);
            break;
          }
          case 18: {
            if (screen_ == null) {
              Screen = new global::LiveKit.Proto.VideoConfiguration();
            }
            input.ReadMessage(Screen);
            break;
          }
          case 24: {
            ResumeConnection = (global::LiveKit.Proto.ClientConfigSetting) input.ReadEnum();
            break;
          }
          case 34: {
            if (disabledCodecs_ == null) {
              DisabledCodecs = new global::LiveKit.Proto.DisabledCodecs();
            }
            input.ReadMessage(DisabledCodecs);
            break;
          }
          case 40: {
            ForceRelay = (global::LiveKit.Proto.ClientConfigSetting) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (video_ == null) {
              Video = new global::LiveKit.Proto.VideoConfiguration();
            }
            input.ReadMessage(Video);
            break;
          }
          case 18: {
            if (screen_ == null) {
              Screen = new global::LiveKit.Proto.VideoConfiguration();
            }
            input.ReadMessage(Screen);
            break;
          }
          case 24: {
            ResumeConnection = (global::LiveKit.Proto.ClientConfigSetting) input.ReadEnum();
            break;
          }
          case 34: {
            if (disabledCodecs_ == null) {
              DisabledCodecs = new global::LiveKit.Proto.DisabledCodecs();
            }
            input.ReadMessage(DisabledCodecs);
            break;
          }
          case 40: {
            ForceRelay = (global::LiveKit.Proto.ClientConfigSetting) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VideoConfiguration : pb::IMessage<VideoConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VideoConfiguration> _parser = new pb::MessageParser<VideoConfiguration>(() => new VideoConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoConfiguration(VideoConfiguration other) : this() {
      hardwareEncoder_ = other.hardwareEncoder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoConfiguration Clone() {
      return new VideoConfiguration(this);
    }

    /// <summary>Field number for the "hardware_encoder" field.</summary>
    public const int HardwareEncoderFieldNumber = 1;
    private global::LiveKit.Proto.ClientConfigSetting hardwareEncoder_ = global::LiveKit.Proto.ClientConfigSetting.Unset;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.ClientConfigSetting HardwareEncoder {
      get { return hardwareEncoder_; }
      set {
        hardwareEncoder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HardwareEncoder != other.HardwareEncoder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HardwareEncoder != global::LiveKit.Proto.ClientConfigSetting.Unset) hash ^= HardwareEncoder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HardwareEncoder != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HardwareEncoder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HardwareEncoder != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HardwareEncoder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HardwareEncoder != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HardwareEncoder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.HardwareEncoder != global::LiveKit.Proto.ClientConfigSetting.Unset) {
        HardwareEncoder = other.HardwareEncoder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HardwareEncoder = (global::LiveKit.Proto.ClientConfigSetting) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HardwareEncoder = (global::LiveKit.Proto.ClientConfigSetting) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisabledCodecs : pb::IMessage<DisabledCodecs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisabledCodecs> _parser = new pb::MessageParser<DisabledCodecs>(() => new DisabledCodecs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisabledCodecs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisabledCodecs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisabledCodecs(DisabledCodecs other) : this() {
      codecs_ = other.codecs_.Clone();
      publish_ = other.publish_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisabledCodecs Clone() {
      return new DisabledCodecs(this);
    }

    /// <summary>Field number for the "codecs" field.</summary>
    public const int CodecsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.Codec> _repeated_codecs_codec
        = pb::FieldCodec.ForMessage(10, global::LiveKit.Proto.Codec.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.Codec> codecs_ = new pbc::RepeatedField<global::LiveKit.Proto.Codec>();
    /// <summary>
    /// disabled for both publish and subscribe
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.Codec> Codecs {
      get { return codecs_; }
    }

    /// <summary>Field number for the "publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LiveKit.Proto.Codec> _repeated_publish_codec
        = pb::FieldCodec.ForMessage(18, global::LiveKit.Proto.Codec.Parser);
    private readonly pbc::RepeatedField<global::LiveKit.Proto.Codec> publish_ = new pbc::RepeatedField<global::LiveKit.Proto.Codec>();
    /// <summary>
    /// only disable for publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveKit.Proto.Codec> Publish {
      get { return publish_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisabledCodecs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisabledCodecs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!codecs_.Equals(other.codecs_)) return false;
      if(!publish_.Equals(other.publish_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= codecs_.GetHashCode();
      hash ^= publish_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      codecs_.WriteTo(output, _repeated_codecs_codec);
      publish_.WriteTo(output, _repeated_publish_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      codecs_.WriteTo(ref output, _repeated_codecs_codec);
      publish_.WriteTo(ref output, _repeated_publish_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += codecs_.CalculateSize(_repeated_codecs_codec);
      size += publish_.CalculateSize(_repeated_publish_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisabledCodecs other) {
      if (other == null) {
        return;
      }
      codecs_.Add(other.codecs_);
      publish_.Add(other.publish_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            codecs_.AddEntriesFrom(input, _repeated_codecs_codec);
            break;
          }
          case 18: {
            publish_.AddEntriesFrom(input, _repeated_publish_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            codecs_.AddEntriesFrom(ref input, _repeated_codecs_codec);
            break;
          }
          case 18: {
            publish_.AddEntriesFrom(ref input, _repeated_publish_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RTPDrift : pb::IMessage<RTPDrift>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RTPDrift> _parser = new pb::MessageParser<RTPDrift>(() => new RTPDrift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RTPDrift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RTPDrift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RTPDrift(RTPDrift other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      duration_ = other.duration_;
      startTimestamp_ = other.startTimestamp_;
      endTimestamp_ = other.endTimestamp_;
      rtpClockTicks_ = other.rtpClockTicks_;
      driftSamples_ = other.driftSamples_;
      driftMs_ = other.driftMs_;
      clockRate_ = other.clockRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RTPDrift Clone() {
      return new RTPDrift(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private double duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 4;
    private ulong startTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "end_timestamp" field.</summary>
    public const int EndTimestampFieldNumber = 5;
    private ulong endTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "rtp_clock_ticks" field.</summary>
    public const int RtpClockTicksFieldNumber = 6;
    private ulong rtpClockTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RtpClockTicks {
      get { return rtpClockTicks_; }
      set {
        rtpClockTicks_ = value;
      }
    }

    /// <summary>Field number for the "drift_samples" field.</summary>
    public const int DriftSamplesFieldNumber = 7;
    private long driftSamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DriftSamples {
      get { return driftSamples_; }
      set {
        driftSamples_ = value;
      }
    }

    /// <summary>Field number for the "drift_ms" field.</summary>
    public const int DriftMsFieldNumber = 8;
    private double driftMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DriftMs {
      get { return driftMs_; }
      set {
        driftMs_ = value;
      }
    }

    /// <summary>Field number for the "clock_rate" field.</summary>
    public const int ClockRateFieldNumber = 9;
    private double clockRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClockRate {
      get { return clockRate_; }
      set {
        clockRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RTPDrift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RTPDrift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (StartTimestamp != other.StartTimestamp) return false;
      if (EndTimestamp != other.EndTimestamp) return false;
      if (RtpClockTicks != other.RtpClockTicks) return false;
      if (DriftSamples != other.DriftSamples) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DriftMs, other.DriftMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ClockRate, other.ClockRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Duration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Duration);
      if (StartTimestamp != 0UL) hash ^= StartTimestamp.GetHashCode();
      if (EndTimestamp != 0UL) hash ^= EndTimestamp.GetHashCode();
      if (RtpClockTicks != 0UL) hash ^= RtpClockTicks.GetHashCode();
      if (DriftSamples != 0L) hash ^= DriftSamples.GetHashCode();
      if (DriftMs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DriftMs);
      if (ClockRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ClockRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Duration != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Duration);
      }
      if (StartTimestamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StartTimestamp);
      }
      if (EndTimestamp != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(EndTimestamp);
      }
      if (RtpClockTicks != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RtpClockTicks);
      }
      if (DriftSamples != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(DriftSamples);
      }
      if (DriftMs != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DriftMs);
      }
      if (ClockRate != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ClockRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Duration != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Duration);
      }
      if (StartTimestamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StartTimestamp);
      }
      if (EndTimestamp != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(EndTimestamp);
      }
      if (RtpClockTicks != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RtpClockTicks);
      }
      if (DriftSamples != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(DriftSamples);
      }
      if (DriftMs != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DriftMs);
      }
      if (ClockRate != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ClockRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Duration != 0D) {
        size += 1 + 8;
      }
      if (StartTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTimestamp);
      }
      if (RtpClockTicks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RtpClockTicks);
      }
      if (DriftSamples != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DriftSamples);
      }
      if (DriftMs != 0D) {
        size += 1 + 8;
      }
      if (ClockRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RTPDrift other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Duration != 0D) {
        Duration = other.Duration;
      }
      if (other.StartTimestamp != 0UL) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.EndTimestamp != 0UL) {
        EndTimestamp = other.EndTimestamp;
      }
      if (other.RtpClockTicks != 0UL) {
        RtpClockTicks = other.RtpClockTicks;
      }
      if (other.DriftSamples != 0L) {
        DriftSamples = other.DriftSamples;
      }
      if (other.DriftMs != 0D) {
        DriftMs = other.DriftMs;
      }
      if (other.ClockRate != 0D) {
        ClockRate = other.ClockRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 25: {
            Duration = input.ReadDouble();
            break;
          }
          case 32: {
            StartTimestamp = input.ReadUInt64();
            break;
          }
          case 40: {
            EndTimestamp = input.ReadUInt64();
            break;
          }
          case 48: {
            RtpClockTicks = input.ReadUInt64();
            break;
          }
          case 56: {
            DriftSamples = input.ReadInt64();
            break;
          }
          case 65: {
            DriftMs = input.ReadDouble();
            break;
          }
          case 73: {
            ClockRate = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 25: {
            Duration = input.ReadDouble();
            break;
          }
          case 32: {
            StartTimestamp = input.ReadUInt64();
            break;
          }
          case 40: {
            EndTimestamp = input.ReadUInt64();
            break;
          }
          case 48: {
            RtpClockTicks = input.ReadUInt64();
            break;
          }
          case 56: {
            DriftSamples = input.ReadInt64();
            break;
          }
          case 65: {
            DriftMs = input.ReadDouble();
            break;
          }
          case 73: {
            ClockRate = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RTPStats : pb::IMessage<RTPStats>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RTPStats> _parser = new pb::MessageParser<RTPStats>(() => new RTPStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RTPStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RTPStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RTPStats(RTPStats other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      duration_ = other.duration_;
      packets_ = other.packets_;
      packetRate_ = other.packetRate_;
      bytes_ = other.bytes_;
      headerBytes_ = other.headerBytes_;
      bitrate_ = other.bitrate_;
      packetsLost_ = other.packetsLost_;
      packetLossRate_ = other.packetLossRate_;
      packetLossPercentage_ = other.packetLossPercentage_;
      packetsDuplicate_ = other.packetsDuplicate_;
      packetDuplicateRate_ = other.packetDuplicateRate_;
      bytesDuplicate_ = other.bytesDuplicate_;
      headerBytesDuplicate_ = other.headerBytesDuplicate_;
      bitrateDuplicate_ = other.bitrateDuplicate_;
      packetsPadding_ = other.packetsPadding_;
      packetPaddingRate_ = other.packetPaddingRate_;
      bytesPadding_ = other.bytesPadding_;
      headerBytesPadding_ = other.headerBytesPadding_;
      bitratePadding_ = other.bitratePadding_;
      packetsOutOfOrder_ = other.packetsOutOfOrder_;
      frames_ = other.frames_;
      frameRate_ = other.frameRate_;
      jitterCurrent_ = other.jitterCurrent_;
      jitterMax_ = other.jitterMax_;
      gapHistogram_ = other.gapHistogram_.Clone();
      nacks_ = other.nacks_;
      nackAcks_ = other.nackAcks_;
      nackMisses_ = other.nackMisses_;
      nackRepeated_ = other.nackRepeated_;
      plis_ = other.plis_;
      lastPli_ = other.lastPli_ != null ? other.lastPli_.Clone() : null;
      firs_ = other.firs_;
      lastFir_ = other.lastFir_ != null ? other.lastFir_.Clone() : null;
      rttCurrent_ = other.rttCurrent_;
      rttMax_ = other.rttMax_;
      keyFrames_ = other.keyFrames_;
      lastKeyFrame_ = other.lastKeyFrame_ != null ? other.lastKeyFrame_.Clone() : null;
      layerLockPlis_ = other.layerLockPlis_;
      lastLayerLockPli_ = other.lastLayerLockPli_ != null ? other.lastLayerLockPli_.Clone() : null;
      packetDrift_ = other.packetDrift_ != null ? other.packetDrift_.Clone() : null;
      reportDrift_ = other.reportDrift_ != null ? other.reportDrift_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RTPStats Clone() {
      return new RTPStats(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private double duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "packets" field.</summary>
    public const int PacketsFieldNumber = 4;
    private uint packets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Packets {
      get { return packets_; }
      set {
        packets_ = value;
      }
    }

    /// <summary>Field number for the "packet_rate" field.</summary>
    public const int PacketRateFieldNumber = 5;
    private double packetRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PacketRate {
      get { return packetRate_; }
      set {
        packetRate_ = value;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 6;
    private ulong bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    /// <summary>Field number for the "header_bytes" field.</summary>
    public const int HeaderBytesFieldNumber = 39;
    private ulong headerBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeaderBytes {
      get { return headerBytes_; }
      set {
        headerBytes_ = value;
      }
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 7;
    private double bitrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }

    /// <summary>Field number for the "packets_lost" field.</summary>
    public const int PacketsLostFieldNumber = 8;
    private uint packetsLost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PacketsLost {
      get { return packetsLost_; }
      set {
        packetsLost_ = value;
      }
    }

    /// <summary>Field number for the "packet_loss_rate" field.</summary>
    public const int PacketLossRateFieldNumber = 9;
    private double packetLossRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PacketLossRate {
      get { return packetLossRate_; }
      set {
        packetLossRate_ = value;
      }
    }

    /// <summary>Field number for the "packet_loss_percentage" field.</summary>
    public const int PacketLossPercentageFieldNumber = 10;
    private float packetLossPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PacketLossPercentage {
      get { return packetLossPercentage_; }
      set {
        packetLossPercentage_ = value;
      }
    }

    /// <summary>Field number for the "packets_duplicate" field.</summary>
    public const int PacketsDuplicateFieldNumber = 11;
    private uint packetsDuplicate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PacketsDuplicate {
      get { return packetsDuplicate_; }
      set {
        packetsDuplicate_ = value;
      }
    }

    /// <summary>Field number for the "packet_duplicate_rate" field.</summary>
    public const int PacketDuplicateRateFieldNumber = 12;
    private double packetDuplicateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PacketDuplicateRate {
      get { return packetDuplicateRate_; }
      set {
        packetDuplicateRate_ = value;
      }
    }

    /// <summary>Field number for the "bytes_duplicate" field.</summary>
    public const int BytesDuplicateFieldNumber = 13;
    private ulong bytesDuplicate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesDuplicate {
      get { return bytesDuplicate_; }
      set {
        bytesDuplicate_ = value;
      }
    }

    /// <summary>Field number for the "header_bytes_duplicate" field.</summary>
    public const int HeaderBytesDuplicateFieldNumber = 40;
    private ulong headerBytesDuplicate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeaderBytesDuplicate {
      get { return headerBytesDuplicate_; }
      set {
        headerBytesDuplicate_ = value;
      }
    }

    /// <summary>Field number for the "bitrate_duplicate" field.</summary>
    public const int BitrateDuplicateFieldNumber = 14;
    private double bitrateDuplicate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BitrateDuplicate {
      get { return bitrateDuplicate_; }
      set {
        bitrateDuplicate_ = value;
      }
    }

    /// <summary>Field number for the "packets_padding" field.</summary>
    public const int PacketsPaddingFieldNumber = 15;
    private uint packetsPadding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PacketsPadding {
      get { return packetsPadding_; }
      set {
        packetsPadding_ = value;
      }
    }

    /// <summary>Field number for the "packet_padding_rate" field.</summary>
    public const int PacketPaddingRateFieldNumber = 16;
    private double packetPaddingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PacketPaddingRate {
      get { return packetPaddingRate_; }
      set {
        packetPaddingRate_ = value;
      }
    }

    /// <summary>Field number for the "bytes_padding" field.</summary>
    public const int BytesPaddingFieldNumber = 17;
    private ulong bytesPadding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesPadding {
      get { return bytesPadding_; }
      set {
        bytesPadding_ = value;
      }
    }

    /// <summary>Field number for the "header_bytes_padding" field.</summary>
    public const int HeaderBytesPaddingFieldNumber = 41;
    private ulong headerBytesPadding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeaderBytesPadding {
      get { return headerBytesPadding_; }
      set {
        headerBytesPadding_ = value;
      }
    }

    /// <summary>Field number for the "bitrate_padding" field.</summary>
    public const int BitratePaddingFieldNumber = 18;
    private double bitratePadding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BitratePadding {
      get { return bitratePadding_; }
      set {
        bitratePadding_ = value;
      }
    }

    /// <summary>Field number for the "packets_out_of_order" field.</summary>
    public const int PacketsOutOfOrderFieldNumber = 19;
    private uint packetsOutOfOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PacketsOutOfOrder {
      get { return packetsOutOfOrder_; }
      set {
        packetsOutOfOrder_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 20;
    private uint frames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frames {
      get { return frames_; }
      set {
        frames_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate" field.</summary>
    public const int FrameRateFieldNumber = 21;
    private double frameRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "jitter_current" field.</summary>
    public const int JitterCurrentFieldNumber = 22;
    private double jitterCurrent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JitterCurrent {
      get { return jitterCurrent_; }
      set {
        jitterCurrent_ = value;
      }
    }

    /// <summary>Field number for the "jitter_max" field.</summary>
    public const int JitterMaxFieldNumber = 23;
    private double jitterMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double JitterMax {
      get { return jitterMax_; }
      set {
        jitterMax_ = value;
      }
    }

    /// <summary>Field number for the "gap_histogram" field.</summary>
    public const int GapHistogramFieldNumber = 24;
    private static readonly pbc::MapField<int, uint>.Codec _map_gapHistogram_codec
        = new pbc::MapField<int, uint>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 194);
    private readonly pbc::MapField<int, uint> gapHistogram_ = new pbc::MapField<int, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, uint> GapHistogram {
      get { return gapHistogram_; }
    }

    /// <summary>Field number for the "nacks" field.</summary>
    public const int NacksFieldNumber = 25;
    private uint nacks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nacks {
      get { return nacks_; }
      set {
        nacks_ = value;
      }
    }

    /// <summary>Field number for the "nack_acks" field.</summary>
    public const int NackAcksFieldNumber = 37;
    private uint nackAcks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NackAcks {
      get { return nackAcks_; }
      set {
        nackAcks_ = value;
      }
    }

    /// <summary>Field number for the "nack_misses" field.</summary>
    public const int NackMissesFieldNumber = 26;
    private uint nackMisses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NackMisses {
      get { return nackMisses_; }
      set {
        nackMisses_ = value;
      }
    }

    /// <summary>Field number for the "nack_repeated" field.</summary>
    public const int NackRepeatedFieldNumber = 38;
    private uint nackRepeated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NackRepeated {
      get { return nackRepeated_; }
      set {
        nackRepeated_ = value;
      }
    }

    /// <summary>Field number for the "plis" field.</summary>
    public const int PlisFieldNumber = 27;
    private uint plis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Plis {
      get { return plis_; }
      set {
        plis_ = value;
      }
    }

    /// <summary>Field number for the "last_pli" field.</summary>
    public const int LastPliFieldNumber = 28;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastPli_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastPli {
      get { return lastPli_; }
      set {
        lastPli_ = value;
      }
    }

    /// <summary>Field number for the "firs" field.</summary>
    public const int FirsFieldNumber = 29;
    private uint firs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Firs {
      get { return firs_; }
      set {
        firs_ = value;
      }
    }

    /// <summary>Field number for the "last_fir" field.</summary>
    public const int LastFirFieldNumber = 30;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastFir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastFir {
      get { return lastFir_; }
      set {
        lastFir_ = value;
      }
    }

    /// <summary>Field number for the "rtt_current" field.</summary>
    public const int RttCurrentFieldNumber = 31;
    private uint rttCurrent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RttCurrent {
      get { return rttCurrent_; }
      set {
        rttCurrent_ = value;
      }
    }

    /// <summary>Field number for the "rtt_max" field.</summary>
    public const int RttMaxFieldNumber = 32;
    private uint rttMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RttMax {
      get { return rttMax_; }
      set {
        rttMax_ = value;
      }
    }

    /// <summary>Field number for the "key_frames" field.</summary>
    public const int KeyFramesFieldNumber = 33;
    private uint keyFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeyFrames {
      get { return keyFrames_; }
      set {
        keyFrames_ = value;
      }
    }

    /// <summary>Field number for the "last_key_frame" field.</summary>
    public const int LastKeyFrameFieldNumber = 34;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastKeyFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastKeyFrame {
      get { return lastKeyFrame_; }
      set {
        lastKeyFrame_ = value;
      }
    }

    /// <summary>Field number for the "layer_lock_plis" field.</summary>
    public const int LayerLockPlisFieldNumber = 35;
    private uint layerLockPlis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LayerLockPlis {
      get { return layerLockPlis_; }
      set {
        layerLockPlis_ = value;
      }
    }

    /// <summary>Field number for the "last_layer_lock_pli" field.</summary>
    public const int LastLayerLockPliFieldNumber = 36;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastLayerLockPli_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastLayerLockPli {
      get { return lastLayerLockPli_; }
      set {
        lastLayerLockPli_ = value;
      }
    }

    /// <summary>Field number for the "packet_drift" field.</summary>
    public const int PacketDriftFieldNumber = 44;
    private global::LiveKit.Proto.RTPDrift packetDrift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.RTPDrift PacketDrift {
      get { return packetDrift_; }
      set {
        packetDrift_ = value;
      }
    }

    /// <summary>Field number for the "report_drift" field.</summary>
    public const int ReportDriftFieldNumber = 45;
    private global::LiveKit.Proto.RTPDrift reportDrift_;
    /// <summary>
    /// NEXT_ID: 46
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveKit.Proto.RTPDrift ReportDrift {
      get { return reportDrift_; }
      set {
        reportDrift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RTPStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RTPStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (Packets != other.Packets) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PacketRate, other.PacketRate)) return false;
      if (Bytes != other.Bytes) return false;
      if (HeaderBytes != other.HeaderBytes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bitrate, other.Bitrate)) return false;
      if (PacketsLost != other.PacketsLost) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PacketLossRate, other.PacketLossRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PacketLossPercentage, other.PacketLossPercentage)) return false;
      if (PacketsDuplicate != other.PacketsDuplicate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PacketDuplicateRate, other.PacketDuplicateRate)) return false;
      if (BytesDuplicate != other.BytesDuplicate) return false;
      if (HeaderBytesDuplicate != other.HeaderBytesDuplicate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BitrateDuplicate, other.BitrateDuplicate)) return false;
      if (PacketsPadding != other.PacketsPadding) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PacketPaddingRate, other.PacketPaddingRate)) return false;
      if (BytesPadding != other.BytesPadding) return false;
      if (HeaderBytesPadding != other.HeaderBytesPadding) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BitratePadding, other.BitratePadding)) return false;
      if (PacketsOutOfOrder != other.PacketsOutOfOrder) return false;
      if (Frames != other.Frames) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrameRate, other.FrameRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(JitterCurrent, other.JitterCurrent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(JitterMax, other.JitterMax)) return false;
      if (!GapHistogram.Equals(other.GapHistogram)) return false;
      if (Nacks != other.Nacks) return false;
      if (NackAcks != other.NackAcks) return false;
      if (NackMisses != other.NackMisses) return false;
      if (NackRepeated != other.NackRepeated) return false;
      if (Plis != other.Plis) return false;
      if (!object.Equals(LastPli, other.LastPli)) return false;
      if (Firs != other.Firs) return false;
      if (!object.Equals(LastFir, other.LastFir)) return false;
      if (RttCurrent != other.RttCurrent) return false;
      if (RttMax != other.RttMax) return false;
      if (KeyFrames != other.KeyFrames) return false;
      if (!object.Equals(LastKeyFrame, other.LastKeyFrame)) return false;
      if (LayerLockPlis != other.LayerLockPlis) return false;
      if (!object.Equals(LastLayerLockPli, other.LastLayerLockPli)) return false;
      if (!object.Equals(PacketDrift, other.PacketDrift)) return false;
      if (!object.Equals(ReportDrift, other.ReportDrift)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Duration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Duration);
      if (Packets != 0) hash ^= Packets.GetHashCode();
      if (PacketRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PacketRate);
      if (Bytes != 0UL) hash ^= Bytes.GetHashCode();
      if (HeaderBytes != 0UL) hash ^= HeaderBytes.GetHashCode();
      if (Bitrate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bitrate);
      if (PacketsLost != 0) hash ^= PacketsLost.GetHashCode();
      if (PacketLossRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PacketLossRate);
      if (PacketLossPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PacketLossPercentage);
      if (PacketsDuplicate != 0) hash ^= PacketsDuplicate.GetHashCode();
      if (PacketDuplicateRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PacketDuplicateRate);
      if (BytesDuplicate != 0UL) hash ^= BytesDuplicate.GetHashCode();
      if (HeaderBytesDuplicate != 0UL) hash ^= HeaderBytesDuplicate.GetHashCode();
      if (BitrateDuplicate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BitrateDuplicate);
      if (PacketsPadding != 0) hash ^= PacketsPadding.GetHashCode();
      if (PacketPaddingRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PacketPaddingRate);
      if (BytesPadding != 0UL) hash ^= BytesPadding.GetHashCode();
      if (HeaderBytesPadding != 0UL) hash ^= HeaderBytesPadding.GetHashCode();
      if (BitratePadding != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BitratePadding);
      if (PacketsOutOfOrder != 0) hash ^= PacketsOutOfOrder.GetHashCode();
      if (Frames != 0) hash ^= Frames.GetHashCode();
      if (FrameRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrameRate);
      if (JitterCurrent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(JitterCurrent);
      if (JitterMax != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(JitterMax);
      hash ^= GapHistogram.GetHashCode();
      if (Nacks != 0) hash ^= Nacks.GetHashCode();
      if (NackAcks != 0) hash ^= NackAcks.GetHashCode();
      if (NackMisses != 0) hash ^= NackMisses.GetHashCode();
      if (NackRepeated != 0) hash ^= NackRepeated.GetHashCode();
      if (Plis != 0) hash ^= Plis.GetHashCode();
      if (lastPli_ != null) hash ^= LastPli.GetHashCode();
      if (Firs != 0) hash ^= Firs.GetHashCode();
      if (lastFir_ != null) hash ^= LastFir.GetHashCode();
      if (RttCurrent != 0) hash ^= RttCurrent.GetHashCode();
      if (RttMax != 0) hash ^= RttMax.GetHashCode();
      if (KeyFrames != 0) hash ^= KeyFrames.GetHashCode();
      if (lastKeyFrame_ != null) hash ^= LastKeyFrame.GetHashCode();
      if (LayerLockPlis != 0) hash ^= LayerLockPlis.GetHashCode();
      if (lastLayerLockPli_ != null) hash ^= LastLayerLockPli.GetHashCode();
      if (packetDrift_ != null) hash ^= PacketDrift.GetHashCode();
      if (reportDrift_ != null) hash ^= ReportDrift.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Duration != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Duration);
      }
      if (Packets != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Packets);
      }
      if (PacketRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PacketRate);
      }
      if (Bytes != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Bytes);
      }
      if (Bitrate != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Bitrate);
      }
      if (PacketsLost != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PacketsLost);
      }
      if (PacketLossRate != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PacketLossRate);
      }
      if (PacketLossPercentage != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PacketLossPercentage);
      }
      if (PacketsDuplicate != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PacketsDuplicate);
      }
      if (PacketDuplicateRate != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(PacketDuplicateRate);
      }
      if (BytesDuplicate != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(BytesDuplicate);
      }
      if (BitrateDuplicate != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(BitrateDuplicate);
      }
      if (PacketsPadding != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(PacketsPadding);
      }
      if (PacketPaddingRate != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(PacketPaddingRate);
      }
      if (BytesPadding != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(BytesPadding);
      }
      if (BitratePadding != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(BitratePadding);
      }
      if (PacketsOutOfOrder != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(PacketsOutOfOrder);
      }
      if (Frames != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Frames);
      }
      if (FrameRate != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(FrameRate);
      }
      if (JitterCurrent != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(JitterCurrent);
      }
      if (JitterMax != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(JitterMax);
      }
      gapHistogram_.WriteTo(output, _map_gapHistogram_codec);
      if (Nacks != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Nacks);
      }
      if (NackMisses != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(NackMisses);
      }
      if (Plis != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Plis);
      }
      if (lastPli_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(LastPli);
      }
      if (Firs != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Firs);
      }
      if (lastFir_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(LastFir);
      }
      if (RttCurrent != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(RttCurrent);
      }
      if (RttMax != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RttMax);
      }
      if (KeyFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(KeyFrames);
      }
      if (lastKeyFrame_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(LastKeyFrame);
      }
      if (LayerLockPlis != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(LayerLockPlis);
      }
      if (lastLayerLockPli_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LastLayerLockPli);
      }
      if (NackAcks != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(NackAcks);
      }
      if (NackRepeated != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(NackRepeated);
      }
      if (HeaderBytes != 0UL) {
        output.WriteRawTag(184, 2);
        output.WriteUInt64(HeaderBytes);
      }
      if (HeaderBytesDuplicate != 0UL) {
        output.WriteRawTag(192, 2);
        output.WriteUInt64(HeaderBytesDuplicate);
      }
      if (HeaderBytesPadding != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(HeaderBytesPadding);
      }
      if (packetDrift_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(PacketDrift);
      }
      if (reportDrift_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ReportDrift);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Duration != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Duration);
      }
      if (Packets != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Packets);
      }
      if (PacketRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PacketRate);
      }
      if (Bytes != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Bytes);
      }
      if (Bitrate != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Bitrate);
      }
      if (PacketsLost != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PacketsLost);
      }
      if (PacketLossRate != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PacketLossRate);
      }
      if (PacketLossPercentage != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PacketLossPercentage);
      }
      if (PacketsDuplicate != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PacketsDuplicate);
      }
      if (PacketDuplicateRate != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(PacketDuplicateRate);
      }
      if (BytesDuplicate != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(BytesDuplicate);
      }
      if (BitrateDuplicate != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(BitrateDuplicate);
      }
      if (PacketsPadding != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(PacketsPadding);
      }
      if (PacketPaddingRate != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(PacketPaddingRate);
      }
      if (BytesPadding != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(BytesPadding);
      }
      if (BitratePadding != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(BitratePadding);
      }
      if (PacketsOutOfOrder != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(PacketsOutOfOrder);
      }
      if (Frames != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Frames);
      }
      if (FrameRate != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(FrameRate);
      }
      if (JitterCurrent != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(JitterCurrent);
      }
      if (JitterMax != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(JitterMax);
      }
      gapHistogram_.WriteTo(ref output, _map_gapHistogram_codec);
      if (Nacks != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Nacks);
      }
      if (NackMisses != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(NackMisses);
      }
      if (Plis != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Plis);
      }
      if (lastPli_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(LastPli);
      }
      if (Firs != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Firs);
      }
      if (lastFir_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(LastFir);
      }
      if (RttCurrent != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(RttCurrent);
      }
      if (RttMax != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(RttMax);
      }
      if (KeyFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(KeyFrames);
      }
      if (lastKeyFrame_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(LastKeyFrame);
      }
      if (LayerLockPlis != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(LayerLockPlis);
      }
      if (lastLayerLockPli_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LastLayerLockPli);
      }
      if (NackAcks != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(NackAcks);
      }
      if (NackRepeated != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(NackRepeated);
      }
      if (HeaderBytes != 0UL) {
        output.WriteRawTag(184, 2);
        output.WriteUInt64(HeaderBytes);
      }
      if (HeaderBytesDuplicate != 0UL) {
        output.WriteRawTag(192, 2);
        output.WriteUInt64(HeaderBytesDuplicate);
      }
      if (HeaderBytesPadding != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(HeaderBytesPadding);
      }
      if (packetDrift_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(PacketDrift);
      }
      if (reportDrift_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(ReportDrift);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Duration != 0D) {
        size += 1 + 8;
      }
      if (Packets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Packets);
      }
      if (PacketRate != 0D) {
        size += 1 + 8;
      }
      if (Bytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bytes);
      }
      if (HeaderBytes != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HeaderBytes);
      }
      if (Bitrate != 0D) {
        size += 1 + 8;
      }
      if (PacketsLost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketsLost);
      }
      if (PacketLossRate != 0D) {
        size += 1 + 8;
      }
      if (PacketLossPercentage != 0F) {
        size += 1 + 4;
      }
      if (PacketsDuplicate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketsDuplicate);
      }
      if (PacketDuplicateRate != 0D) {
        size += 1 + 8;
      }
      if (BytesDuplicate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesDuplicate);
      }
      if (HeaderBytesDuplicate != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HeaderBytesDuplicate);
      }
      if (BitrateDuplicate != 0D) {
        size += 1 + 8;
      }
      if (PacketsPadding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PacketsPadding);
      }
      if (PacketPaddingRate != 0D) {
        size += 2 + 8;
      }
      if (BytesPadding != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BytesPadding);
      }
      if (HeaderBytesPadding != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HeaderBytesPadding);
      }
      if (BitratePadding != 0D) {
        size += 2 + 8;
      }
      if (PacketsOutOfOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PacketsOutOfOrder);
      }
      if (Frames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Frames);
      }
      if (FrameRate != 0D) {
        size += 2 + 8;
      }
      if (JitterCurrent != 0D) {
        size += 2 + 8;
      }
      if (JitterMax != 0D) {
        size += 2 + 8;
      }
      size += gapHistogram_.CalculateSize(_map_gapHistogram_codec);
      if (Nacks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Nacks);
      }
      if (NackAcks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NackAcks);
      }
      if (NackMisses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NackMisses);
      }
      if (NackRepeated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NackRepeated);
      }
      if (Plis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Plis);
      }
      if (lastPli_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastPli);
      }
      if (Firs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Firs);
      }
      if (lastFir_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastFir);
      }
      if (RttCurrent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RttCurrent);
      }
      if (RttMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RttMax);
      }
      if (KeyFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KeyFrames);
      }
      if (lastKeyFrame_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastKeyFrame);
      }
      if (LayerLockPlis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LayerLockPlis);
      }
      if (lastLayerLockPli_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastLayerLockPli);
      }
      if (packetDrift_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PacketDrift);
      }
      if (reportDrift_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReportDrift);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RTPStats other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Duration != 0D) {
        Duration = other.Duration;
      }
      if (other.Packets != 0) {
        Packets = other.Packets;
      }
      if (other.PacketRate != 0D) {
        PacketRate = other.PacketRate;
      }
      if (other.Bytes != 0UL) {
        Bytes = other.Bytes;
      }
      if (other.HeaderBytes != 0UL) {
        HeaderBytes = other.HeaderBytes;
      }
      if (other.Bitrate != 0D) {
        Bitrate = other.Bitrate;
      }
      if (other.PacketsLost != 0) {
        PacketsLost = other.PacketsLost;
      }
      if (other.PacketLossRate != 0D) {
        PacketLossRate = other.PacketLossRate;
      }
      if (other.PacketLossPercentage != 0F) {
        PacketLossPercentage = other.PacketLossPercentage;
      }
      if (other.PacketsDuplicate != 0) {
        PacketsDuplicate = other.PacketsDuplicate;
      }
      if (other.PacketDuplicateRate != 0D) {
        PacketDuplicateRate = other.PacketDuplicateRate;
      }
      if (other.BytesDuplicate != 0UL) {
        BytesDuplicate = other.BytesDuplicate;
      }
      if (other.HeaderBytesDuplicate != 0UL) {
        HeaderBytesDuplicate = other.HeaderBytesDuplicate;
      }
      if (other.BitrateDuplicate != 0D) {
        BitrateDuplicate = other.BitrateDuplicate;
      }
      if (other.PacketsPadding != 0) {
        PacketsPadding = other.PacketsPadding;
      }
      if (other.PacketPaddingRate != 0D) {
        PacketPaddingRate = other.PacketPaddingRate;
      }
      if (other.BytesPadding != 0UL) {
        BytesPadding = other.BytesPadding;
      }
      if (other.HeaderBytesPadding != 0UL) {
        HeaderBytesPadding = other.HeaderBytesPadding;
      }
      if (other.BitratePadding != 0D) {
        BitratePadding = other.BitratePadding;
      }
      if (other.PacketsOutOfOrder != 0) {
        PacketsOutOfOrder = other.PacketsOutOfOrder;
      }
      if (other.Frames != 0) {
        Frames = other.Frames;
      }
      if (other.FrameRate != 0D) {
        FrameRate = other.FrameRate;
      }
      if (other.JitterCurrent != 0D) {
        JitterCurrent = other.JitterCurrent;
      }
      if (other.JitterMax != 0D) {
        JitterMax = other.JitterMax;
      }
      gapHistogram_.Add(other.gapHistogram_);
      if (other.Nacks != 0) {
        Nacks = other.Nacks;
      }
      if (other.NackAcks != 0) {
        NackAcks = other.NackAcks;
      }
      if (other.NackMisses != 0) {
        NackMisses = other.NackMisses;
      }
      if (other.NackRepeated != 0) {
        NackRepeated = other.NackRepeated;
      }
      if (other.Plis != 0) {
        Plis = other.Plis;
      }
      if (other.lastPli_ != null) {
        if (lastPli_ == null) {
          LastPli = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastPli.MergeFrom(other.LastPli);
      }
      if (other.Firs != 0) {
        Firs = other.Firs;
      }
      if (other.lastFir_ != null) {
        if (lastFir_ == null) {
          LastFir = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastFir.MergeFrom(other.LastFir);
      }
      if (other.RttCurrent != 0) {
        RttCurrent = other.RttCurrent;
      }
      if (other.RttMax != 0) {
        RttMax = other.RttMax;
      }
      if (other.KeyFrames != 0) {
        KeyFrames = other.KeyFrames;
      }
      if (other.lastKeyFrame_ != null) {
        if (lastKeyFrame_ == null) {
          LastKeyFrame = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastKeyFrame.MergeFrom(other.LastKeyFrame);
      }
      if (other.LayerLockPlis != 0) {
        LayerLockPlis = other.LayerLockPlis;
      }
      if (other.lastLayerLockPli_ != null) {
        if (lastLayerLockPli_ == null) {
          LastLayerLockPli = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastLayerLockPli.MergeFrom(other.LastLayerLockPli);
      }
      if (other.packetDrift_ != null) {
        if (packetDrift_ == null) {
          PacketDrift = new global::LiveKit.Proto.RTPDrift();
        }
        PacketDrift.MergeFrom(other.PacketDrift);
      }
      if (other.reportDrift_ != null) {
        if (reportDrift_ == null) {
          ReportDrift = new global::LiveKit.Proto.RTPDrift();
        }
        ReportDrift.MergeFrom(other.ReportDrift);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 25: {
            Duration = input.ReadDouble();
            break;
          }
          case 32: {
            Packets = input.ReadUInt32();
            break;
          }
          case 41: {
            PacketRate = input.ReadDouble();
            break;
          }
          case 48: {
            Bytes = input.ReadUInt64();
            break;
          }
          case 57: {
            Bitrate = input.ReadDouble();
            break;
          }
          case 64: {
            PacketsLost = input.ReadUInt32();
            break;
          }
          case 73: {
            PacketLossRate = input.ReadDouble();
            break;
          }
          case 85: {
            PacketLossPercentage = input.ReadFloat();
            break;
          }
          case 88: {
            PacketsDuplicate = input.ReadUInt32();
            break;
          }
          case 97: {
            PacketDuplicateRate = input.ReadDouble();
            break;
          }
          case 104: {
            BytesDuplicate = input.ReadUInt64();
            break;
          }
          case 113: {
            BitrateDuplicate = input.ReadDouble();
            break;
          }
          case 120: {
            PacketsPadding = input.ReadUInt32();
            break;
          }
          case 129: {
            PacketPaddingRate = input.ReadDouble();
            break;
          }
          case 136: {
            BytesPadding = input.ReadUInt64();
            break;
          }
          case 145: {
            BitratePadding = input.ReadDouble();
            break;
          }
          case 152: {
            PacketsOutOfOrder = input.ReadUInt32();
            break;
          }
          case 160: {
            Frames = input.ReadUInt32();
            break;
          }
          case 169: {
            FrameRate = input.ReadDouble();
            break;
          }
          case 177: {
            JitterCurrent = input.ReadDouble();
            break;
          }
          case 185: {
            JitterMax = input.ReadDouble();
            break;
          }
          case 194: {
            gapHistogram_.AddEntriesFrom(input, _map_gapHistogram_codec);
            break;
          }
          case 200: {
            Nacks = input.ReadUInt32();
            break;
          }
          case 208: {
            NackMisses = input.ReadUInt32();
            break;
          }
          case 216: {
            Plis = input.ReadUInt32();
            break;
          }
          case 226: {
            if (lastPli_ == null) {
              LastPli = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastPli);
            break;
          }
          case 232: {
            Firs = input.ReadUInt32();
            break;
          }
          case 242: {
            if (lastFir_ == null) {
              LastFir = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFir);
            break;
          }
          case 248: {
            RttCurrent = input.ReadUInt32();
            break;
          }
          case 256: {
            RttMax = input.ReadUInt32();
            break;
          }
          case 264: {
            KeyFrames = input.ReadUInt32();
            break;
          }
          case 274: {
            if (lastKeyFrame_ == null) {
              LastKeyFrame = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastKeyFrame);
            break;
          }
          case 280: {
            LayerLockPlis = input.ReadUInt32();
            break;
          }
          case 290: {
            if (lastLayerLockPli_ == null) {
              LastLayerLockPli = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastLayerLockPli);
            break;
          }
          case 296: {
            NackAcks = input.ReadUInt32();
            break;
          }
          case 304: {
            NackRepeated = input.ReadUInt32();
            break;
          }
          case 312: {
            HeaderBytes = input.ReadUInt64();
            break;
          }
          case 320: {
            HeaderBytesDuplicate = input.ReadUInt64();
            break;
          }
          case 328: {
            HeaderBytesPadding = input.ReadUInt64();
            break;
          }
          case 354: {
            if (packetDrift_ == null) {
              PacketDrift = new global::LiveKit.Proto.RTPDrift();
            }
            input.ReadMessage(PacketDrift);
            break;
          }
          case 362: {
            if (reportDrift_ == null) {
              ReportDrift = new global::LiveKit.Proto.RTPDrift();
            }
            input.ReadMessage(ReportDrift);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 25: {
            Duration = input.ReadDouble();
            break;
          }
          case 32: {
            Packets = input.ReadUInt32();
            break;
          }
          case 41: {
            PacketRate = input.ReadDouble();
            break;
          }
          case 48: {
            Bytes = input.ReadUInt64();
            break;
          }
          case 57: {
            Bitrate = input.ReadDouble();
            break;
          }
          case 64: {
            PacketsLost = input.ReadUInt32();
            break;
          }
          case 73: {
            PacketLossRate = input.ReadDouble();
            break;
          }
          case 85: {
            PacketLossPercentage = input.ReadFloat();
            break;
          }
          case 88: {
            PacketsDuplicate = input.ReadUInt32();
            break;
          }
          case 97: {
            PacketDuplicateRate = input.ReadDouble();
            break;
          }
          case 104: {
            BytesDuplicate = input.ReadUInt64();
            break;
          }
          case 113: {
            BitrateDuplicate = input.ReadDouble();
            break;
          }
          case 120: {
            PacketsPadding = input.ReadUInt32();
            break;
          }
          case 129: {
            PacketPaddingRate = input.ReadDouble();
            break;
          }
          case 136: {
            BytesPadding = input.ReadUInt64();
            break;
          }
          case 145: {
            BitratePadding = input.ReadDouble();
            break;
          }
          case 152: {
            PacketsOutOfOrder = input.ReadUInt32();
            break;
          }
          case 160: {
            Frames = input.ReadUInt32();
            break;
          }
          case 169: {
            FrameRate = input.ReadDouble();
            break;
          }
          case 177: {
            JitterCurrent = input.ReadDouble();
            break;
          }
          case 185: {
            JitterMax = input.ReadDouble();
            break;
          }
          case 194: {
            gapHistogram_.AddEntriesFrom(ref input, _map_gapHistogram_codec);
            break;
          }
          case 200: {
            Nacks = input.ReadUInt32();
            break;
          }
          case 208: {
            NackMisses = input.ReadUInt32();
            break;
          }
          case 216: {
            Plis = input.ReadUInt32();
            break;
          }
          case 226: {
            if (lastPli_ == null) {
              LastPli = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastPli);
            break;
          }
          case 232: {
            Firs = input.ReadUInt32();
            break;
          }
          case 242: {
            if (lastFir_ == null) {
              LastFir = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFir);
            break;
          }
          case 248: {
            RttCurrent = input.ReadUInt32();
            break;
          }
          case 256: {
            RttMax = input.ReadUInt32();
            break;
          }
          case 264: {
            KeyFrames = input.ReadUInt32();
            break;
          }
          case 274: {
            if (lastKeyFrame_ == null) {
              LastKeyFrame = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastKeyFrame);
            break;
          }
          case 280: {
            LayerLockPlis = input.ReadUInt32();
            break;
          }
          case 290: {
            if (lastLayerLockPli_ == null) {
              LastLayerLockPli = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastLayerLockPli);
            break;
          }
          case 296: {
            NackAcks = input.ReadUInt32();
            break;
          }
          case 304: {
            NackRepeated = input.ReadUInt32();
            break;
          }
          case 312: {
            HeaderBytes = input.ReadUInt64();
            break;
          }
          case 320: {
            HeaderBytesDuplicate = input.ReadUInt64();
            break;
          }
          case 328: {
            HeaderBytesPadding = input.ReadUInt64();
            break;
          }
          case 354: {
            if (packetDrift_ == null) {
              PacketDrift = new global::LiveKit.Proto.RTPDrift();
            }
            input.ReadMessage(PacketDrift);
            break;
          }
          case 362: {
            if (reportDrift_ == null) {
              ReportDrift = new global::LiveKit.Proto.RTPDrift();
            }
            input.ReadMessage(ReportDrift);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimedVersion : pb::IMessage<TimedVersion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimedVersion> _parser = new pb::MessageParser<TimedVersion>(() => new TimedVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimedVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveKit.Proto.LivekitModelsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimedVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimedVersion(TimedVersion other) : this() {
      unixMicro_ = other.unixMicro_;
      ticks_ = other.ticks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimedVersion Clone() {
      return new TimedVersion(this);
    }

    /// <summary>Field number for the "unix_micro" field.</summary>
    public const int UnixMicroFieldNumber = 1;
    private long unixMicro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnixMicro {
      get { return unixMicro_; }
      set {
        unixMicro_ = value;
      }
    }

    /// <summary>Field number for the "ticks" field.</summary>
    public const int TicksFieldNumber = 2;
    private int ticks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticks {
      get { return ticks_; }
      set {
        ticks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimedVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimedVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnixMicro != other.UnixMicro) return false;
      if (Ticks != other.Ticks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnixMicro != 0L) hash ^= UnixMicro.GetHashCode();
      if (Ticks != 0) hash ^= Ticks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UnixMicro != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnixMicro);
      }
      if (Ticks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UnixMicro != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnixMicro);
      }
      if (Ticks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnixMicro != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnixMicro);
      }
      if (Ticks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimedVersion other) {
      if (other == null) {
        return;
      }
      if (other.UnixMicro != 0L) {
        UnixMicro = other.UnixMicro;
      }
      if (other.Ticks != 0) {
        Ticks = other.Ticks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnixMicro = input.ReadInt64();
            break;
          }
          case 16: {
            Ticks = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UnixMicro = input.ReadInt64();
            break;
          }
          case 16: {
            Ticks = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
